<?xml version="1.0" encoding="UTF-8"?>
<fdd:FDD id="fdd000354" titleName="ZIP File Format (PKWARE)" shortName="ZIP_PK" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fdd="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1" xsi:schemaLocation="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1 http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1/fdd-v1-2.xsd">
	<fdd:properties>
		<fdd:gdfrGenreSelection>
			<fdd:gdfrGenre>aggregate</fdd:gdfrGenre>
		</fdd:gdfrGenreSelection>
		<fdd:formatCategories>
			<fdd:category>family</fdd:category>
		</fdd:formatCategories>
		<fdd:gdfrComposition>container-bundle</fdd:gdfrComposition>
		<fdd:gdfrForm>binary</fdd:gdfrForm>
		<fdd:gdfrConstraint>structured</fdd:gdfrConstraint>
		<fdd:gdfrTransform>compression</fdd:gdfrTransform>
		<fdd:updates>
			<fdd:date>2020-05-28</fdd:date>
		</fdd:updates>
		<fdd:draftStatus>Full</fdd:draftStatus>
	</fdd:properties>
	<fdd:identificationAndDescription>
		<fdd:fullName>ZIP File Format (PKWARE)</fdd:fullName>
		<fdd:keywords>
			<fdd:keyword>ZIP</fdd:keyword>
			<fdd:keyword>archive file formats</fdd:keyword>
			<fdd:keyword>package formats</fdd:keyword>
			<fdd:keyword>container formats</fdd:keyword>
			<fdd:keyword>bundling formats</fdd:keyword>
		</fdd:keywords>
		<fdd:description>
			<p>This format is designed for cross-platform data exchange and efficient data storage for a set of related files. ZIP_PK is a de facto industry standard, developed, maintained, and openly documented by <a href="https://www.pkware.com/">PKWARE</a>.  The original version of the format was developed by Phil Katz (hence the &quot;PK&quot; in PKWARE).  ZIP_PK combines data compression, file management, and data encryption within a portable archive format.  A ZIP file is a package containing one or more files, usually compressed  and sometimes encrypted.  The basic structure consists of a sequence of chunks comprising a &quot;local file header&quot; followed by the file data (after compression and/or encryption) followed by a chunk known as the &quot;central directory,&quot; which lists the files in the package along with key metadata to support their extraction, decryption, etc.  Over the years the format has been extended by PKWARE to adapt to new expectations of users and to changing technology, for example, to allow improved methods for compression and encryption, to support larger file sizes, and to support UNICODE UTF-8 for filenames.  See <a href="#notes">Notes</a> below for more detail on chronological versions.</p>
			<p>Over the years a few variants of the ZIP format have been introduced by other companies, variants that were not necessarily fully compatible with any particular ZIP_PK version, with the differences often being related to timing of introduction of new features, such as support for long file names or stronger encryption.  For clarity, the compilers of this resource have chosen to use the name &quot;ZIP_PK&quot; for the format described in this document.  See <a href="#notes">Notes</a> below for a brief discussion of variants.</p>
			<p>ZIP_PK has been adopted as the package or container for several digital formats that represent a single document or other logical unit but comprise multiple files.  These include:</p>
			<ul>
				<li>Office Open XML (<fddLink id="fdd000395">OOXML</fddLink>, standardized as ECMA 376 and ISO/IEC 29500)</li>
				<li>Office Document Format (<fddLink id="fdd000247">ODF</fddLink>, from OASIS, later standardized as ISO/IEC 26300)</li>
				<li>EPUB (for electronic publications, originally developed by the International Digital Publishing Forum (IDPF) and since 2017 under the auspices of the World Wide Web Consortium (W3C).  See <fddLink id="fdd000308">EPUB_3_0</fddLink> (ISO/IEC TS 30135:2014) and <fddLink id="fdd000309">EPUB_3_2</fddLink>. </li>
				<li>Java ARchive (JAR, used to distribute software applications or libraries in the Java programming language).</li>
			</ul>
		</fdd:description>
		<fdd:shortDescription>A de facto industry standard for cross-platform data exchange and efficient data storage, combining data compression and data encryption in a portable archive format for a set of related files.</fdd:shortDescription>
		<fdd:productionPhase>May be used at any lifecycle phase for bundling/packaging files together for exchange, storage, or distribution.  In particular, XML-based office productivity formats use a ZIP package that may be used during the initial creating phase; and XML-based formats such as EPUB, intended for distributing published (final-stage) documents, also use ZIP as a package or container.</fdd:productionPhase>
		<fdd:relationships>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000355</fdd:id>
					<fdd:shortName>ZIP_6_2_0</fdd:shortName>
					<fdd:titleName>ZIP file format, version 6.2.0 (PKWARE)</fdd:titleName>
				</fdd:relatedTo>
				<fdd:comment>Version 6.2.0 of the APPNOTE.TXT from PKWARE, published in 2004, has been incorporated into Office OpenXML (OOXML, ISO 29500-2:2008-2012) and the Open Document Format (ODF: 1.0 and 1.2 as published by OASIS) as the document container format.</fdd:comment>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000362</fdd:id>
					<fdd:shortName>ZIP_6_3_3</fdd:shortName>
					<fdd:titleName>ZIP File Format, Version 6.3.3 (PKWARE)</fdd:titleName>
				</fdd:relatedTo>
				<fdd:comment>Chosen as the basis for a proposed ISO specification (to be ISO/IEC 21320, once approved) for a Document Container Format.</fdd:comment>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000361</fdd:id>
					<fdd:shortName>ZIP_21320_1</fdd:shortName>
					<fdd:titleName>Document Container File: Core (based on ZIP 6.3.3)</fdd:titleName>
				</fdd:relatedTo>
				<fdd:comment>ISO/IEC 21320-1 Information technology -- Document Container File -- Part 1: Core</fdd:comment>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:comment>The ZIP_PK format has other chronological versions, more of which may be separately described in the future, for example, if specific versions are incorporated into other specifications.</fdd:comment>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000492</fdd:id>
					<fdd:shortName>SLPK</fdd:shortName>
					<fdd:titleName>SLPK Scene Layer Package (for I3S layers)</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000547</fdd:id>
					<fdd:shortName>KMZ</fdd:shortName>
					<fdd:titleName>KML (formerly Keyhole Markup Language) Zipped</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000574</fdd:id>
					<fdd:shortName>USDZ</fdd:shortName>
					<fdd:titleName>Universal Scene Description Zipped (USDZ)</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000586</fdd:id>
					<fdd:shortName>WACZ</fdd:shortName>
					<fdd:titleName>Web Archive Collection Zipped</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000595</fdd:id>
					<fdd:shortName>XAP</fdd:shortName>
					<fdd:titleName>Silverlight Application Package</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has extension</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000592</fdd:id>
					<fdd:shortName>APK</fdd:shortName>
					<fdd:titleName>Android Package</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has extension</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000593</fdd:id>
					<fdd:shortName>IPA</fdd:shortName>
					<fdd:titleName>iOS App Store Package</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Used by</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000557</fdd:id>
					<fdd:shortName>3MF</fdd:shortName>
					<fdd:titleName>3D Manufacturing Format (3MF)</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Used by</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000535</fdd:id>
					<fdd:shortName>IMF_Package</fdd:shortName>
					<fdd:titleName>Interoperable Master Format (IMF)</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has modified version</fdd:typeOfRelationship>
				<fdd:comment>Other entities have introduced variant format versions using the .zip extension, not strictly compatible with any particular chronological version of ZIP_PK, but using its extension capabilities.  See <a href="#notes">Notes</a> below for a brief discussion of variants and compatibility.</fdd:comment>
			</fdd:relationship>
		</fdd:relationships>
	</fdd:identificationAndDescription>
	<fdd:localUse>
		<fdd:experience>The Library of Congress has several workflows that rely on the ZIP format for transmitting digital content to the library.  These workflows rely on open-source toolkits and/or desktop decompressors.  In all current workflows, the ZIP format is used for transmission only, with the ZIP wrapper discarded after successful extraction of the contents.</fdd:experience>
		<fdd:preference>To date, the Library of Congress has found no need to stipulate particular versions of ZIP_PK or particular features of the format to avoid.  In general the Library of Congress does not accept content submitted in encrypted form. The Library of Congress Recommended Formats Statement (RFS) lists ZIP as both a preferred (for direct file submission) and acceptable (on a mass storage device) format for packaged delivery of <a href="https://www.loc.gov/preservation/resources/rfs/software-videogames.html">Software and Video Games</a>. </fdd:preference>
	</fdd:localUse>
	<fdd:sustainabilityFactors>
		<fdd:disclosure>The ZIP_PK format has been developed and maintained by PKWARE, Inc. since 1998.  The format specification is proprietary, but the most recent version has always been openly disclosed as the .ZIP Application Note with a file name of APPNOTE.TXT.</fdd:disclosure>
		<fdd:documentation>
			<p>In the past, PKWARE provided public access only to the <a href="https://www.pkware.com/documents/casestudies/APPNOTE.TXT">most recent Application Note</a>. In association with the standardization of Office Open XML (OOXML) as ISO 29500:2008, access was also provided to the <a href="https://www.pkware.com/documents/APPNOTE/APPNOTE_6.2.0.txt">version 6.2.0</a> explicitly incorporated into that format specification.  PKWARE now provides access to <a href="https://support.pkware.com/home/pkzip/developer-tools/appnote/application-note-archives">an archive of selected versions of the .ZIP Application Note</a>.</p>
			<p>See <a href="#notes">Notes</a> below for a chronology of versions of APPNOTE.TXT introducing significant new features to the format.  Changes between <a href="https://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.2.TXT">version 6.3.2 (2007)</a> and <a href="https://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.3.TXT">version 6.3.3 (2012)</a> of APPNOTE.TXT do not reflect changes in the format, but rather editorial and layout changes based on discussions with an ISO working group that studied the ZIP format.  Changes, such as adding paragraph numbers, were made to making it easier for ISO standards to reference the ZIP specification in an unambiguous and reliable way.</p>
		</fdd:documentation>
		<fdd:adoption>
			<p>The ZIP_PK format has been very widely adopted.  Most usage has been and continues to be based on a subset of features, resulting in a high level of interoperability.  Many tools exist to create and read ZIP files that do not include strong encryption, including tools integrated into operating systems for personal computers and/or stand-alone tools shipped with new computers.  See <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)#Version_history">https://en.wikipedia.org/wiki/ZIP_(file_format)</a> for many examples; just a few will be mentioned here.</p>
			<p>The originator of the format, PKWARE, provides a range of products, from a free <a href="https://www.pkware.com/zip-reader">ZIP Reader</a> for Windows, <a href="https://www.pkware.com/store">PKZIP and SecureZIP</a> for Windows Desktop and various IBM platforms, to server-based products.</p>
			<p>
				<b>As of September 2012</b>:</p>
			<p>Windows (&quot;compressed folders&quot;) and Mac OS (Archive Utility) have built in support for a subset of ZIP features.  Earlier versions of these operating systems typically shipped with &quot;lite&quot; versions of utilities such as WinZip and Stuffit. Most versions of Unix (including the version that underlies recent Mac OS versions, ship with <i>zip</i> and <i>unzip</i> utilities, made available from <a href="http://infozip.sourceforge.net/">Info-ZIP</a> along with open-source software libraries compatible with many operating systems.  The Info-ZIP software, developed starting in 1990 to provide ZIP-compatible tools for operating systems other than DOS, supports the most useful features supported by the ZIP_PK format, and has been widely incorporated into other products, including WinZip and <a href="http://jhove.sourceforge.net/thirdpartymodules/zipmodule.html">JHOVE (JSTOR/Harvard Object Validation Environment)</a>.  Its capabilities have thus served as a common denominator for interoperability.  As of 2012, the latest version of Info-ZIP&apos;s <i>zip</i> utility is from 2008 and of <i>unzip</i> is from 2009; these versions support filenames in UTF-8 and the ZIP64 extension introduced by PKWARE in 2001 to handle large files.  A Java-based utility <i>java.util.zip</i> is included in the Java Developer Kit.  Apache Commons Compress extends the functionality of <i>java.util.zip</i>.  Several perl and python software libraries for manipulating ZIP files can be found on the web.  Note: Many ZIP utilities or software libraries support only a subset of ZIP_PK features, particularly those available without licensing.  Many compression/archiving utilities, including PKZIP, support ZIP_PK (.zip) as one of several input/output file formats.</p>
			<p>
				<b>Update on adoption in 2020:</b>
			</p>
			<p>ZIP support continues to extend. In 2015, <a href="https://www.iso.org/standard/60101.html">ISO/IEC 21320-1</a> was published as an international standard for a container based on the ZIP format for digital documents that comprise multiple files, using a subset of features that can be freely implemented.  See <fddLink id="fdd000361">ZIP_21320_1</fddLink>.  Support for opening ZIP files has been added to iOS.  Starting with iOS 7 (2013), ZIP files received via Mail or Messages could be opened.  More general support was added in 2018 with the Files app, added in iOS 11. The Files app allows users to see the contents of a ZIP file, and extract files.   For Android, a number of apps exist.  <a href="../contact_format.shtml">Comments welcome.</a>.</p>
			<p>ZIP_PK has been used as a packaging or container format in other format specifications.  These format specifications typically do not incorporate patented features of ZIP_PK and typically constrain the use of other features, for example, allowing only the DEFLATE algorithm for compression. Features that do tend to get incorporated include: long filenames, encoding of filenames, etc. in UTF-8, and the ZIP64 mechanism introduced by PKWARE for handling large ZIP files.  See <a href="#notes">Notes</a> below for more detail.</p>
		</fdd:adoption>
		<fdd:licensingAndPatents>
			<p>According to <a href="https://web.archive.org/web/20130218130516/http://www.pkware.com:80/about-us/phil-katz">Our Founder -- Phil Katz</a>, on the PKWARE website (as of February 2013) the original developer&apos;s &quot;decision to dedicate the .ZIP extension and file format specification to the public domain helped the .ZIP file format become a globally open standard.&quot; As a result, many utilities for creating or reading files in the ZIP_PK format have been and can be developed without separate license agreements.  Two mechanisms supported by more recent versions of the format are covered by PKWARE patents: portions of the strong encryption technology support; and a technique for issuing and incorporating patches to content previously distributed as ZIP archives.  Tools that manipulate ZIP files but avoid use of these mechanisms can be developed without license concerns.  See <a href="#notes">Notes</a> below for more detail on the scope of PKWARE patents and licensing.</p>
			<p>Third parties with rights associated with code incorporated into PKWARE&apos;s own ZIP Reader products were listed, with license terms, (as of September 2012) at <a href="https://web.archive.org/web/20120429034552/http://www.pkware.com/Support-Desktop/zipreaderthirdparty">http://www.pkware.com/Support-Desktop/zipreaderthirdparty</a> (link now via Internet Archive).  All were made available to PKZIP under some form of public (open-source) license and would presumably be available to other tool developers.  The compilers of this resource are not aware of any patent concerns with compression or encryption methods for which the ZIP_PK specification through version 6.3.3 of APPNOTE.TXT, has identifying codes.  <a href="../contact_format.shtml">Comments welcome.</a>
			</p>
		</fdd:licensingAndPatents>
		<fdd:transparency>Depends upon algorithms and tools to read. Would require sophistication to build tools from scratch. </fdd:transparency>
		<fdd:selfDocumentation>
			<p>Since the format provides a mechanism to bundle files together, a component file that provides rich metadata in a standard or application-specific format can be included in a ZIP file.  This practice has been incorporated into the package specifications for EPUB, OOXML, ODF, etc.  The ZIP_PK specification includes a central directory, which contains the metadata required to extract the contents of the ZIP file, i.e., file names and directory structure.  The inclusion of comments for each file is supported within the format, but not (or only partially) by some utilities or software libraries.</p>
			<p>
				<b>Accessibility Features</b>
			</p>
			<p>No specific features in the file format. Features to support accessibility would be found in the bundled and compressed files (such as embedded captions and subtitles in audiovisual content, tagged and structured text in textual documents, and alt text for images). Aggregate files can also contain separate files for transcripts, timed text or captions as part of the bundled package. See <a href="#identification">Relationships to other formats</a> for details.</p>
		</fdd:selfDocumentation>
		<fdd:externalDependencies>
			<p>None, beyond the availability of software to extract and decompress the files contained in a ZIP file.  The ZIP_PK format itself includes a mechanism for defining within a ZIP file the minimum version that must be supported to extract, decompress, and decrypt (if needed) the contents.  Minimum versions for particular extensions and methods for compression and encryption are documented in APPNOTE.TXT.  Note: Use of strong encryption may rely on keys conveyed externally or external authentication procedures.</p>
		</fdd:externalDependencies>
		<fdd:techProtection>An important feature of the ZIP_PK format is the ability to encrypt the contained files individually.  Over the years, support for increasingly strong forms of encryption, and for encryption of the ZIP central directory has been added.  Certain applications that employ the ZIP format to bundle files together, such as OOXML (ISO/IEC 29500-2:2012), explicitly prohibit encryption within the ZIP-based package.  Others, such as SCORM and EPUB, employ their own application-specific approaches to encryption.</fdd:techProtection>
	</fdd:sustainabilityFactors>
	<fdd:qualityAndFunctionalityFactors>
		<fdd:aggregateQF>
			<fdd:compress>Options for compression are extensive and include BZIP2, LZMA, DEFLATE, IBM z/OS CMPSC Compression, IBM TERSE, IBM LZ77 z Architecture, Zstandard (zstd), MP3 Compression, XZ Compression, JPEG variant, WavPack compressed data, PPMd version I, and AE-x encryption marker. </fdd:compress>
			<fdd:error>ZIP files may use a CRC-32 hash for checking file integrity.</fdd:error>
			<fdd:beyondAGG>Two mechanisms supported by the ZIP_PK format go beyond the functions of bundling and compression.  The first is the ability to construct a self-extracting executable .zip file.  The second is a &quot;patching&quot; mechanism, described in <a href="#notes">Notes</a> below.</fdd:beyondAGG>
		</fdd:aggregateQF>
	</fdd:qualityAndFunctionalityFactors>
	<fdd:fileTypeSignifiers>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>zip</fdd:sigValue>
					<fdd:sigValue>ZIP</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>Other extensions are used for particular applications that use the ZIP format as a container, for example, <fddLink id="fdd000308">EPUB_3</fddLink>, which recommends .epub as the file extension.</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>application/zip</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>See <a href="https://www.iana.org/assignments/media-types/application/zip">registration at IANA</a>.</fdd:note>
			</fdd:internetMediaType>
			<fdd:other>
				<fdd:tag>File signature</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Hex: 50 4B 03 04</fdd:sigValue>
						<fdd:sigValue>ASCII:  P K etx eot</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>In the specification, this 4-byte &quot;local&quot; file header signature is expressed in little-endian form as 0x04034b50.  The compilers of this resource have chosen to express the ZIP signifiers in the byte-order that is consistent with most documentation for internal file signifiers, such as <a href="https://www.nationalarchives.gov.uk/PRONOM/">PRONOM</a> and the File Extension Source (<a href="https://filext.com/file-extension/ZIP">FILext</a>).  Most ZIP files begin with this 4-byte string, since most ZIP files begin with a local file header.  However, as pointed out in <a href="https://en.wikipedia.org/wiki/Zip_%28file_format%29#Structure">https://en.wikipedia.org/wiki/Zip_(file_format)</a>, a ZIP file does not need to begin with a file entry.  The signature patterns below should also be considered.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>File signature</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Hex: 50 4B 01 02 {...} 50 4B 05 06 {...}
</fdd:sigValue>
						<fdd:sigValue>ASCII: P K soh stx  {...} P K enq ack {...}</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>This signature pattern adapted from PRONOM for convenient display represents the beginning of a central directory record and the mandatory end of central directory record which will be found at or near the end of a ZIP file.  See <a href="http://www.nationalarchives.gov.uk/PRONOM/x-fmt/263">PRONOM record for ZIP (PUID: x-fmt/263)</a>, which documents signatures at both the beginning and end of the file.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>File signature</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Hex: 50 4B 05 06</fdd:sigValue>
						<fdd:sigValue>ASCII: P K enq ack</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>At <a href="https://web.archive.org/web/20221112073316/https://www.garykessler.net/library/file_sigs.html">https://web.archive.org/web/20221112073316/https://www.garykessler.net/library/file_sigs.html</a> this signature based on the mandatory <i>end of central directory</i> record is documented as a <i>Trailer</i> signature, with a stipulation to expect 18 additional bytes before the end of the file.  APPNOTE.TXT 6.3.3 stipulates that a valid file should have one and only one <i>end of central directory</i> record, but does not state explicitly that it be at the physical end of the file.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>File signature</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Hex: 50 4B 05 06</fdd:sigValue>
						<fdd:sigValue>ASCII: P K enq ack</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>At beginning of empty ZIP archive file. From <a href="https://web.archive.org/web/20221112073316/https://www.garykessler.net/library/file_sigs.html">https://web.archive.org/web/20221112073316/https://www.garykessler.net/library/file_sigs.html</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>File signature</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Hex: 50 4B 07 08</fdd:sigValue>
						<fdd:sigValue>ASCII: P K bel bs</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>At beginning of first file of a split or spanned ZIP archive. From <a href="https://web.archive.org/web/20221112073316/https://www.garykessler.net/library/file_sigs.html">https://web.archive.org/web/20221112073316/https://www.garykessler.net/library/file_sigs.html</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Other</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>NF00458</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="https://www.archives.gov/files/lod/dpframework/id/NF00458.ttl">https://www.archives.gov/files/lod/dpframework/id/NF00458.ttl</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Pronom PUID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>x-fmt/263</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="https://www.nationalarchives.gov.uk/PRONOM/x-fmt/263">https://www.nationalarchives.gov.uk/PRONOM/x-fmt/263</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Wikidata Title ID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Q136218</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="https://www.wikidata.org/wiki/Q136218">https://www.wikidata.org/wiki/Q136218</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
		</fdd:signifiersGroup>
	</fdd:fileTypeSignifiers>
	<fdd:notes>
		<fdd:general>
			<p>
				<b>Use of ZIP file format in other specifications:</b> The notes here describe the relationship of some specifications based on ZIP to versions and features of ZIP_PK.  These notes are based on the specification documents.</p>
			<ul>
				<li>The <b>SCORM</b> (Sharable Content Object Reference Model, used for learning materials) includes a Package Interchange Format (PIF) based on ZIP. The SCORM 2004 Content Aggregation Model mandates compliance with PKZip v 2.04g and <a href="https://www.ietf.org/rfc/rfc1951.txt">RFC 1951 ( DEFLATE)</a> as the only compression algorithm. Numbering of versions of the PKZip software and the APPNOTE.TXT specification do not correspond; however, the timelines on <a href="https://en.wikipedia.org/wiki/PKZIP">https://en.wikipedia.org/wiki/PKZIP</a> and <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)">https://en.wikipedia.org/wiki/ZIP_(file_format)</a> suggest that SCORM 2004 usage corresponds to APPNOTE.TXT version 2.x.</li>
				<li>
					<b>JAR</b> files, packages used to transmit software in the Java programming language are also based on the ZIP file format. The JAR specification was originally based on an <a href="ftp://ftp.info-zip.org/pub/infozip/doc/appnote-19970311-iz.zip">APPNOTE.TXT version dated 1997-03-11 modified by Info-ZIP</a> and based on a PKWARE version dated 1996-02-15.  The <a href="http://docs.oracle.com/javase/7/docs/api/java/util/jar/package-summary.html">JAR utility description</a> also specifies that file-names must be encoded in UTF-8.  Compression, if applied, uses <a href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 (DEFLATE)</a>. Version 7 of the Java platform (current as of September 2012) refers to the latest APPNOTE.TXT for optional use of the ZIP64 extension to support large files and for indicating the use of UTF-8 (Appendix D).  The Java platform does not support encryption. [Aside: program code can be <i>obfuscated</i> (e.g., by changing meaningful names for variables, etc. to &quot;a,&quot; &quot;b,&quot;...) to make it hard to read.]</li>
				<li>
					<b>The Open Packaging Conventions (OPC, Part 2 of ISO/IEC 29500, OOXML)</b> are based on <a href="http://www.pkware.com/documents/APPNOTE/APPNOTE_6.2.0.txt">version 6.2.0 of APPNOTE.TXT</a>. Compression is restricted to DEFLATE; digital signatures are not supported.  Details on the use of ZIP in OPC are in section 10 and Annex C of ISO/IEC 29500-2:2012.</li>
				<li>Version 1.2 of <b>ODF</b> (Open Document Format for Office Applications) from OASIS incorporates <a href="http://www.pkware.com/documents/APPNOTE/APPNOTE_6.2.0.txt">version 6.2.0 of APPNOTE.TXT</a>. The only compression algorithm allowed is DEFLATE (RFC 1951).  ODF defines its own encryption mechanism.  Version 1.0 of ODF (as published as ISO/IEC 26300:2006) referred to the <a href="ftp://ftp.info-zip.org/pub/infozip/doc/appnote-19970311-iz.zip">APPNOTE.TXT version dated 1997-03-11 from Info-ZIP</a>, because no appropriate version was made available publicly by PKWARE at the time because the version 6.2.0 referred to by the original ODF specification from OASIS had been superseded.  Now that PKWARE maintains an archive of documentation to facilitate persistent references, Version 1.2 of ODF again refers to version 6.2.0 of APPNOTE.TXT at PKWARE.</li>
				<li>Versions 2 and 3 of <b>EPUB</b> define OCF (Open Container Format) as a package for encapsulating the components of an electronic publication.  <fddLink id="fdd000308">EPUB_3</fddLink> mandates a container format based on ZIP as defined by <a href="http://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.0.TXT">version 6.3.0 of APPNOTE.TXT</a>. In <fddLink id="fdd000278">EPUB_2</fddLink>, the ZIP-based container was supported but not mandated.  The only compression algorithm allowed is DEFLATE (RFC 1951).  Split ZIP archives are explicitly prohibited.  Encryption is only allowed using an EPUB-specific approach.  File names, etc. must be in UTF-8. Use of the PKWARE ZIP64 extension (version 1 only) is allowed but discouraged unless the content requires it.</li>
			</ul>
			<p>Bearing in mind changes in technology since the original ZIP_PK, it appears to the compilers of this description that a common set of features for the most interoperable usage is emerging, including: the basic ZIP_PK structure with CRC-32 for checking file integrity, DEFLATE compression (or no compression), and support for long filenames, for filenames, etc., encoded in UTF-8, and for large files through ZIP64.  ZIP_PK features avoided in these specifications include: encryption as supported in ZIP_PK; other compression schemes; other features covered by PKWARE patents.  Application-specific approaches have been developed for file manifests (with more information than in the ZIP Central Directory), metadata, digital signatures, and encryption.  <a href="../contact_format.shtml">Comments welcome.</a>
			</p>
			<p>
				<b>PKWARE patents and licensing:</b>  One set of changes between <a href="http://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.2.TXT">version 6.3.2 (2007)</a> and <a href="http://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.3.TXT">version 6.3.3 (2012)</a> of APPNOTE.TXT was intended to add clarity to the specification in relation to the scope and applicability of PKWARE&apos;s patents, making clearer to potential developers the particular sections of the specification that have any relationship to PKWARE&apos;s patents, with the implication that reliance on other sections should provide no patent concerns.  Statements in version 6.3.3 include: &quot;Portions of the Strong Encryption technology defined in this specification are covered under patents and pending patent applications.&quot; and &quot;Patch support is provided by PKPatchMaker(tm) technology and is covered under U.S. Patents and Patents Pending.&quot;  [See explanation of &quot;patch technology&quot; immediately below.]  In specific sections of version 6.3.3 of APPNOTE.TXT that relate to these two features, pointers are made to Section 10 of version 6.3.3 of APPNOTE.TXT, entitled &quot;Incorporating PKWARE Proprietary Technology into Your Product.&quot; This section includes the following statement, &quot;The Use or Implementation in a product of APPNOTE technological components pertaining to either strong encryption or patching requires a separate, executed license agreement from PKWARE.&quot; and provides contact information.  These formal statements may be read in the context of the purpose expressed in the new section 1.1.1 of version 6.3.3 of APPNOTE.TXT, &quot;This specification is intended to define a cross-platform,
interoperable file storage and transfer format.  Since its first publication in 1989, PKWARE, Inc. (&quot;PKWARE&quot;) has remained committed to ensuring the interoperability of the .ZIP file format through periodic publication and maintenance of this specification.  We trust that all .ZIP compatible vendors and application developers that use and benefit from this format will share and support this commitment to interoperability.&quot;</p>
			<p>PKWARE declares the patents it owns at <a href="https://support.pkware.com/home/pkzip/developer-tools/appnote/intellectual-property">https://support.pkware.com/home/pkzip/developer-tools/appnote/intellectual-property</a>.</p>
			<p>
				<b>Patching technology support in ZIP format:</b>  Jim Peterson of PKWARE provided the following explanation:  The &quot;patching&quot; technology is a means for using ZIP files to distribute revised document content by delivering only the changed elements of a prior document instead of having to deliver a complete new copy of the revised version.  The premise is that a user delivers version 1 of a file to other users.  Later, version 2 is prepared for delivery to the same recipients.  The patching technology provides capabilities to compare version 1 and version 2 and distill out only the differences between the documents.  The user distributing version 2 can then deliver only the differences rather than a whole new document with the objective of reducing the amount of information to deliver to update a user from version 1 to version 2.  Upon receipt, the changes can be applied directly the original version 1 of the document/file with the end result that version 2 becomes available to the receiving users through the patching technology.

</p>
			<p>
				<b>Support for ZIP_PK features:</b>  The <a href="http://www.pkware.com/documents/APPNOTE/APPNOTE-6.3.3.TXT">2012 version 6.3.3 of the .ZIP Application Note</a> indicates, &quot;Newer versions of this format specification are intended to remain interoperable with all prior versions whenever technically possible.&quot;  Although PKWARE products are likely to support all features in ZIP_PK, other ZIP utilities will not necessarily support optional features.  In particular, support for any particular compression or encryption method is optional.  Section 4 of the 2012 version 6.3.3 of APPNOTE.TXT provides a clearer specification of which features are mandatory and which optional than earlier versions.  Section 4.1.3 states, &quot;Compression method 8 (Deflate) is the method used by default by most Zip compatible application programs.&quot;  Apache Commons Compress, a software toolkit built in Java, provides some informative details on creating interoperable ZIP files at <a href="http://commons.apache.org/proper/commons-compress/index.html">http://commons.apache.org/proper/commons-compress/index.html</a>
			</p>
			<p>
				<b>Variants from other vendors:</b>  Due to differences in timing of introduction of features in different products, such as WinZip and the Info-ZIP tools, some files with a .zip extension produced in the past may not strictly comply with the ZIP_PK specification as represented by a particular edition of APPNOTE.TXT.  Others may use the mechanisms for extensibility in ZIP_PK in ways that other utilities do not recognize.  In general, a consensus towards convergence has emerged in recent years.  For example, features introduced by other developers have been folded back into the ZIP_PK specification.  The compilers of this resource are unable to determine how serious the potential problem of incompatible legacy files is in practice.  Experience at the Library of Congress with the use of ZIP files for transmission of digital content to the library has been almost entirely trouble-free.</p>
			<p>The WinZip product introduced a .zipx extension to distinguish archive files that used more advanced features, retaining .zip for files using only the features supported by most ZIP utilities.  Version 6.3.3 of APPNOTE.TXT mentions .zipx as an extension that may be used for files compliant with the format it specifies.  The compilers of this resource are not aware of any use of the .zipx extension for files created by tools other than WinZip.  <a href="../contact_format.shtml">Comments welcome.</a>
			</p>
			<p>Several different tools that have  "zip" in their names have their own native storage format and do not necessarily support the ZIP_PK format described here, for example, <i>gzip</i>; <i>7-zip</i>; and <i>bzip2</i>.</p>
			<p>
				<b>Data integrity checks:</b>  A mandatory feature of the ZIP_PK format is the use of a 32-bit cyclic redundancy check (CRC) for each file using a specific CRC-32 algorithm.  On decompression, ZIP utilities are expected to recalculate a CRC on the decompressed file and check against the CRC stored in the ZIP archive file.  In addition, ZIP_PK provides a way to store optional digital signatures.</p>
		</fdd:general>
		<fdd:history>
			<p>
				<b>Chronology for APPNOTE.TXT versions:</b> Since the first publication of APPNOTE.TXT in 1990, ZIP_PK has been extended in response to a changing technological environment, while retaining its straightforward structure.  As new features have been added to ZIP_PK, care has been taken to ensure backwards compatibility, so that new software versions can read files in all previous versions of the format specification.  A chronology of significant versions of the APPNOTE specification for ZIP_PK, prior to and including 2012, follows below.  The details and descriptions were provided by Jim Peterson, Chief Scientist, PKWARE.  Versions not on this list introduced only minor changes, such as corrections or support for an additional compression method.</p>
			<ul>
				<li>1.0, 1990-03-15	[<a href="http://hdl.loc.gov/loc.gdc/digformat.000009.1">http://hdl.loc.gov/loc.gdc/digformat.000009.1</a>]<br/>Initial ZIP format created by Phil Katz of PKWARE, Inc.  Includes original 96-bit (triple 32-bit) password encryption storage definition.  </li>
				<li>2.0, 1993-02-01 [<a href="http://hdl.loc.gov/loc.gdc/digformat.000010.1">http://hdl.loc.gov/loc.gdc/digformat.000010.1</a>]
					<br/>Introduces the Deflate data compression algorithm which becomes one of the most widely used compression algorithms.</li>
				<li>4.0, 2000-11-01  [<a href="http://hdl.loc.gov/loc.gdc/digformat.000011.1">http://hdl.loc.gov/loc.gdc/digformat.000011.1</a>]<br/>Introduces support for using digital signatures to verify data in a ZIP file and adds the fast Deflate64 data compression algorithm.</li>
				<li>4.5, 2001-11-01 [<a href="http://hdl.loc.gov/loc.gdc/digformat.000012.1">http://hdl.loc.gov/loc.gdc/digformat.000012.1</a>]<br/>Introduces support for storing more than 65535 files in a ZIP file and file sizes exceeding the previous 4 gigabyte limit.</li>
				<li>5.2, 2003-07-16   [<a href="http://hdl.loc.gov/loc.gdc/digformat.000013.1">http://hdl.loc.gov/loc.gdc/digformat.000013.1</a>]<br/>Introduces initial storage specification for adding stronger encryption using algorithms exceeding 128-bits based on passwords, digital certificates, or a combination of both simultaneously.</li>
				<li>6.2.0, 2004-04-26   [<a href="http://hdl.loc.gov/loc.gdc/digformat.000014.1">http://hdl.loc.gov/loc.gdc/digformat.000014.1</a>]<br/>Defines storage specification to support encrypting ZIP file metadata, such as file names, within the ZIP Central Directory.  Reference version for incorporating the ZIP format into Office Open XML File Format standard ECMA-376 (versions 1, 2, and 3) and ISO/IEC 29500 (versions published in 2008 and 2012).</li>
				<li>6.2.2, 2006-01-06   [<a href="http://hdl.loc.gov/loc.gdc/digformat.000015.1">http://hdl.loc.gov/loc.gdc/digformat.000015.1</a>]<br/>Documents final storage specification for adding stronger encryption using algorithms exceeding 128-bits using passwords, digital certificates, or a combination of both simultaneously.</li>
				<li>6.3.0, 2006-09-29   [<a href="http://hdl.loc.gov/loc.gdc/digformat.000016.1">http://hdl.loc.gov/loc.gdc/digformat.000016.1</a>]<br/>Documents support within ZIP files for using hash algorithms of SHA-256, SHA-384 and SHA-512; incorporates LZMA and PPMd data compression algorithms; support for Blowfish and Twofish data encryption algorithms; definition of UTF-8 international file name storage.</li>
				<li>6.3.3, 2012-09-01   [<a href="http://hdl.loc.gov/loc.gdc/digformat.000017.1">http://hdl.loc.gov/loc.gdc/digformat.000017.1</a>]<br/>Formatting changes to the document add conformance requirements and support easier referencing by other standards that incorporate the ZIP format.</li>
			</ul>
			<p>
				<b>ZIP_PK in the international standards environment:</b>  As described in <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)#Standardization">https://en.wikipedia.org/wiki/ZIP_(file_format)</a>, a proposed project to create an ISO/IEC international standard for a format compatible with ZIP failed to pass a 2010 ballot of national standards bodies.  Instead, a study period was initiated, resulting in recommendations documented in <a href="https://web.archive.org/web/20150317134106/http://kikaku.itscj.ipsj.or.jp/sc34/open/1621.pdf">ISO/IEC JTC 1/SC 34 N 1621</a>.  The recommendations were (a) to have PKWARE continue its maintenance of the ZIP Application Note, (b) to plan for a new multi-part ISO standard to build on top of the ZIP Application Note, and (c) to propose a new work item for Part 1 of the new standard for a Document Container File.  The new work item was approved in August 2011 and the standard was published in 2015, as <a href="https://www.iso.org/standard/60101.html">ISO/IEC 21320-1:2015 - Information technology -- Document Container File -- Part 1: Core</a>.</p>
		</fdd:history>
	</fdd:notes>
	<fdd:formatSpecifications>
		<fdd:urls>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>PKWARE provides online access to the latest specification, known as the .ZIP Application Note, and stored as APPNOTE.TXT, and an archived selection of earlier versions.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://support.pkware.com/home/pkzip/developer-tools/appnote</link>
							<tag>Introduction to .ZIP Application Note</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.pkware.com/documents/casestudies/APPNOTE.TXT</link>
							<tag>Current version of APPNOTE.TXT from PKWARE</tag>
							<comment>This URL always leads to the latest version.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://support.pkware.com/home/pkzip/developer-tools/appnote/application-note-archives</link>
							<tag>Archive of .ZIP Application Notes from PKWARE</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
		</fdd:urls>
	</fdd:formatSpecifications>
	<fdd:usefulReferences>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.iana.org/assignments/media-types/application/zip</link>
					<tag>Registration of internet media type for ZIP at IANA.</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/ZIP_(file_format)</link>
					<tag>Wikipedia page for ZIP file format</tag>
					<comment>Includes a version history listing key advances in the ZIP_PK specification through versions of the APPNOTE.TXT document.  Also discusses efforts since 2012 to bring the ZIP format into the international standards environment. </comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>ISO/IEC 21320-1 was a standards effort approved in August 2011 under ISO/IEC JTC 1/SC 34/WG1 [Markup Languages] for core requirements for a document container file.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.iso.org/standard/60101.html</link>
							<tag>ISO catalogue entry for ISO/IEC 21320-1:2015.</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://web.archive.org/web/20150317134106/http://kikaku.itscj.ipsj.or.jp/sc34/open/1621.pdf</link>
							<tag>ISO/IEC JTC 1/SC 34 N 1621: Proposal for a New Work Item on Information Technology -- Document Container File -- Part 1: Core</tag>
							<comment>This document provided the starting background for ISO/IEC 21320-1.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.ietf.org/rfc/rfc1951.txt</link>
					<tag>RFC 1951: DEFLATE Compressed Data Format Specification version 1.3</tag>
					<comment>No changes to the format had been made since version 1.1, only changes to the document.  States, &quot;Phil Katz designed the deflate format.  Jean-Loup Gailly and Mark
Adler wrote the related software described in this specification.&quot;</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/Cyclic_redundancy_check</link>
					<tag>Wikipedia page for Cyclic Redundancy Check (CRC)</tag>
					<comment>Background on CRC.  ZIP_PK uses a specific 32-bit CRC algorithm, cited in APPNOTE.TXT.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Info-ZIP is the open-source project of a group originally formed in 1990 as a mailing list. To quote from the group&apos;s website, &quot;Info-ZIP&apos;s purpose is to provide free, portable, high-quality versions of the Zip and UnZip compressor-archiver utilities that are compatible with the DOS-based PKZIP by PKWARE, Inc.&quot; 

Info-ZIP tools and libraries support Unix, Mac OS, Windows, and many other operating systems.  Code from Info-ZIP has been the basis for many other ZIP implementations. Info-ZIP&apos;s documentation of the ZIP format has been relied on historically by other developers and in other specifications, such as JAR, since PKWARE made only the most recent version of APPNOTE.TXT available.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>http://infozip.sourceforge.net/</link>
							<tag>Info_ZIP home page</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>ftp://ftp.info-zip.org/pub/infozip/doc/</link>
							<tag>Documentation from Info-ZIP</tag>
							<comment>Includes Info-ZIP variants on APPNOTE.TXT dated from 1996 to 2004.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/Info-ZIP</link>
							<tag>Wikipedia page for Info-ZIP</tag>
							<comment>Includes chronology of versions of the Info-ZIP utilities.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources illustrating support for ZIP format in mobile operating systems, iOS and Android</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.howtogeek.com/212703/how-to-open-zip-files-on-an-iphone-or-ipad/</link>
							<tag>How to Open Zip Files on an iPhone or iPad (updated November 2018)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.howtogeek.com/fyi/how-to-unzip-a-zip-file-with-your-iphone-or-ipads-files-app/</link>
							<tag>How to Unzip a Zip File With Your iPhone or iPad’s Files App (November 2018)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.androidauthority.com/the-best-zip-and-unzip-apps-for-android-258692/</link>
							<tag>5 best zip, rar, and unzip apps for Android (May 2020)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.androidauthority.com/file-manager-explorer-apps-android-279800/</link>
							<tag>10 best Android file explorer apps, file browsers, and file managers! (November 2019)</tag>
							<comment>Some file managers for Android will open ZIP files and allow extraction of files.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://docs.oracle.com/javase/7/docs/technotes/guides/jar/index.html</link>
					<tag>Java Archive (JAR) Files, Java SE, version 7</tag>
					<comment>The Java programming language was originally developed at Sun Microsystems, acquired in early 2010 by Oracle.  The associated toolkit includes java.jar.util, which, in turn, depends on java.zip.util.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://commons.apache.org/proper/commons-compress/zip.html</link>
					<tag>ZIP Package in Apache Commons Compress toolkit</tag>
					<comment>This page describes how this package extends the java.zip.util that it is based on.  It also has useful tips on creating interoperable ZIP files.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://jhove.sourceforge.net/thirdpartymodules/zipmodule.html</link>
					<tag>Third-party ZIP and GZIP modules for JHOVE, from Portico</tag>
					<comment>Retrieved 2012-09-22.  Described as draft and dated 4-April-2007.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://web.archive.org/web/20120429034552/http://www.pkware.com/Support-Desktop/zipreaderthirdparty</link>
					<tag>PKWARE, Inc., Third-Party License Summary for ZIP Reader (2012) | link via Internet Archive</tag>
					<comment/>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.winzip.com/aes_info.htm</link>
					<tag>WinZip: AES Encryption Information</tag>
					<comment>This page (last updated in 2009) discusses how WinZip extended the ZIP format to support AES encryption.  Although the page does not mention PKWARE, the phrase &quot;basic ZIP file format&quot; refers to a modifed version of APPNOTE, distributed by Info-Zip, based on PKWARE's APPNOTE dated Feb 15, 1996, and updated to take account of the 6.2.0 version dated April 26, 2004.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://support.winzip.com/hc/en-us/articles/115011349147-Is-WinZip-compatible-with-older-versions-of-WinZip-and-other-Zip-file-utilities-</link>
					<tag>Is WinZip compatible with older versions of WinZip and other Zip file utilities?</tag>
					<comment>Explains WinZip options for creating .zip or .zipx files.  The .zip files created by WinZip are intended for greatest compatibility with other Zip file utilities.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.archives.gov/files/lod/dpframework/id/NF00458.ttl</link>
					<tag>NARA File Format Preservation Plan ID entry for NF00458</tag>
					<comment>Information in NARA File Format Preservation Plan ID about ZIP archive.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.nationalarchives.gov.uk/PRONOM/x-fmt/263</link>
					<tag>ZIP file format entry at PRONOM</tag>
					<comment>PUID is x-fmt/263</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.wikidata.org/wiki/Q136218</link>
					<tag>Wikidata entry for Q136218</tag>
					<comment>Information in Wikidata for ZIP family of archive file formats.  Wikidata Title ID: Q136218</comment>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:usefulReferences>
</fdd:FDD>
