<?xml version="1.0" encoding="UTF-8"?>
<fdd:FDD id="fdd000508" titleName="Wavefront Material Template Library (MTL) File Format" shortName="MTL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fdd="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1" xsi:schemaLocation="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1 http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1/fdd-v1-2.xsd">
	<fdd:properties>
		<fdd:gdfrGenreSelection>
			<fdd:gdfrGenre>model</fdd:gdfrGenre>
		</fdd:gdfrGenreSelection>
		<fdd:formatCategories>
			<fdd:category>file-format</fdd:category>
			<fdd:category>encoding</fdd:category>
		</fdd:formatCategories>
		<fdd:gdfrComposition>unitary</fdd:gdfrComposition>
		<fdd:gdfrForm>text</fdd:gdfrForm>
		<fdd:gdfrConstraint>structured</fdd:gdfrConstraint>
		<fdd:gdfrBasis>symbolic</fdd:gdfrBasis>
		<fdd:updates>
			<fdd:date>2019-10-04</fdd:date>
		</fdd:updates>
		<fdd:draftStatus>Full</fdd:draftStatus>
	</fdd:properties>
	<fdd:identificationAndDescription>
		<fdd:fullName>Wavefront Material Template Library (MTL) File Format</fdd:fullName>
		<fdd:keywords>
			<fdd:keyword>3D model formats</fdd:keyword>
		</fdd:keywords>
		<fdd:description>
			<p>The Wavefront Material Template Library (MTL) file is a companion file for one or more <fddLink id="fdd000507">Wavefront OBJ</fddLink> files. Like the OBJ format, the MTL format was used and documented by <a href="https://en.wikipedia.org/wiki/Wavefront_Technologies">Wavefront Technologies</a> in the 1990s in association with its <a href="https://en.wikipedia.org/wiki/The_Advanced_Visualizer">Advanced Visualizer</a> software.  The ASCII-based MTL file describes surface appearance properties to be applied to polygonal facets or freeform curved patches defined in an OBJ file.  The MTL file is a &quot;library&quot; that can contain one or more named material definitions, each of which can specify color, texture, and reflection characteristics.  For example, the definition for a material might specify RGB values for the material&apos;s diffuse, ambient, and specular reflectivity, along with other characteristics such as index of refraction and transparency.  An OBJ file refers to the MTL file in an <i>mtllib</i> declaration and definitions for objects (polygonal or freeform) within the OBJ file can refer to a particular named material definition with a <i>usemtl</i> statement.</p>
			<p>An MTL file contains a sequence of material definitions, each beginning with the keyword <i>newmtl</i> and a name for the material.  Statements in a material definition consist of a keyword, followed by keyword-specific options, values, or references to supplementary files for use as texture maps.  The material definition ends either at the end of the file or at the next <i>newmtl</i> statement.  The statements that define the characteristics of the material can be in any order.  An example of a material definition is:</p>
			<p>newmtl Wood<br/>Ka 1.000000 1.000000 1.000000
<br/>Kd 0.640000 0.640000 0.640000
<br/>Ks 0.500000 0.500000 0.500000<br/>Ns 96.078431<br/>Ni 1.000000
<br/>d 1.000000
<br/>illum 0
<br/>map_Kd woodtexture.jpg
</p>
			<p>The example uses the following keywords:</p>
			<ul>
				<li>
					<i>Ka</i>: specifies <b>ambient color</b>, to account for light that is scattered about the entire scene [see <a href="https://en.wikipedia.org/wiki/Phong_reflection_model">Wikipedia entry for Phong Reflection Model</a>] using values between 0 and 1 for the RGB components.</li>
				<li>
					<i>Kd</i>: specifies <b>diffuse color</b>, which typically contributes most of the color to an object [see <a href="https://en.wikipedia.org/wiki/Diffuse_reflection">Wikipedia entry for Diffuse Reflection</a>].  In this example, Kd represents a grey color, which will get modified by a colored texture map specified in the map_Kd statement</li>
				<li>
					<i>Ks</i>: specifies <b>specular color</b>, the color seen where the surface is shiny and mirror-like [see <a href="https://en.wikipedia.org/wiki/Specular_reflection">Wikipedia entry for Specular Reflection</a>].</li>
				<li>
					<i>Ns</i>: defines the focus of <b>specular highlights</b> in the material.  Ns values normally range
from 0 to 1000, with a high value resulting in a tight, concentrated highlight.</li>
				<li>
					<i>Ni</i>: defines the <b>optical density</b> (aka index of refraction) in the current material.  The values can range from 0.001 to 10.  A value of 1.0 means that light does not bend as it passes through an object.</li>
				<li>
					<i>d</i>: specifies a factor for <b>dissolve</b>, how much this material dissolves into the background.  A factor of 1.0 is fully opaque.  A factor of 0.0 is completely transparent.</li>
				<li>
					<i>illum</i>: specifies an<b> illumination model</b>, using a numeric value.  See <a href="#notes">Notes</a> below for more detail on the <i>illum</i> keyword.  The value 0 represents the simplest illumination model, relying on the Kd for the material modified by a texture map specified in a <i>map_Kd</i> statement if present.  The compilers of this resource believe that the choice of illumination model is irrelevant for 3D printing use and is ignored on import by some software applications.  For example, the <a href="https://threejs.org/examples/jsm/loaders/MTLLoader.js">MTL Loader</a> in the threejs Javascript library appears to ignore <i>illum</i> statements. <a href="../contact_format.shtml">Comments welcome</a>.</li>
				<li>
					<i>map_Kd</i>: specifies a <b>color texture file</b> to be applied to the diffuse reflectivity of the material.  During rendering, map_Kd values are multiplied by the Kd values to derive the RGB components.</li>
			</ul>
			<p>The keywords in the MTL example above are very commonly used. The <a href="http://paulbourke.net/dataformats/mtl/">MTL specification</a>, as published in 1995, includes a substantial number of options that are typically not supported in today&apos;s software.  Some look to have been specific to Advanced Visualizer and not to have been widely used for exchange between different 3D modeling applications or for 3D printing.  See <a href="#notes">Notes</a> below for more detail on features in the MTL specification that are unlikely to be supported as of 2019.</p>
			<p>Another potential source of interoperability problems with MTL files is the addition of new keywords for proprietary use or to support new approaches for 3D rendering.  In 2015, additional keywords were <a href="http://exocortex.com/blog/extending_wavefront_mtl_to_support_pbr">proposed by Exocortex</a> to support the &quot;physically based rendering&quot; approach being adopted for more realistic rendering of surfaces for 3D objects in games and for special effects in movies.  The compilers of this resource have been unable to determine the degree to which the new keywords proposed are supported in 3D software applications.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
			<p>Despite shortcomings, the OBJ format and its companion MTL format are widely used for 3D printing and for interchange of 3D models between software applications.  See <a href="#sustainability">Adoption</a> in Sustainability Factors below.</p>
		</fdd:description>
		<fdd:shortDescription>an ASCII-based format for a companion file that defines color and other appearance properties for named &quot;materials&quot; to be applied to surfaces defined in a Wavefront OBJ file for a 3D model.  Originally developed by Wavefront Technologies in early 1990s.  Widely used for 3D printing and interchange of 3D models between software applications.</fdd:shortDescription>
		<fdd:relationships>
			<fdd:relationship>
				<fdd:typeOfRelationship>Used by</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000507</fdd:id>
					<fdd:shortName>OBJ</fdd:shortName>
					<fdd:titleName>Wavefront OBJ File Format</fdd:titleName>
				</fdd:relatedTo>
				<fdd:comment>The MTL file provides color and texture definitions for surface objects (polygonal facets and freeform patches) as defined in an OBJ file.</fdd:comment>
			</fdd:relationship>
		</fdd:relationships>
	</fdd:identificationAndDescription>
	<fdd:localUse>
		<fdd:experience>See <fddLink id="fdd000507">Wavefront OBJ</fddLink>.</fdd:experience>
		<fdd:preference>See <fddLink id="fdd000507">Wavefront OBJ</fddLink>.</fdd:preference>
	</fdd:localUse>
	<fdd:sustainabilityFactors>
		<fdd:disclosure>The MTL format was developed by Wavefront Technologies around 1990 and the format was openly documented in a manual for version 3 of the Advanced Visualizer software sold by Wavefront.  See also <fddLink id="fdd000507"> Wavefront OBJ</fddLink>.</fdd:disclosure>
		<fdd:documentation>
			<a href="http://paulbourke.net/dataformats/mtl/">MTL Material Format</a>, excerpt from File Formats, Version 4.2
October 1995 by Wavefront Technologies.</fdd:documentation>
		<fdd:adoption>
			<p>The <fddLink id="fdd000507">OBJ</fddLink> format is very widely used for 3D printing, particularly for multi-color 3D printing with the colors specified in a companion MTL file.  See, for example, <a href="https://3dinsider.com/stl-vs-obj/">STL vs. OBJ: Which Should You Use?</a> [for 3D printing], which states, &quot; two file formats stand supreme: <fddLink id="fdd000504">STL</fddLink> and OBJ.&quot;</p>
			<p>Although most CAD/CAM and 3D modeling software can import OBJ files, not all can successfully import all MTL files.  See <a href="#notes">Notes</a> below for interoperability issues that may affect adoption.</p>
			<p>The OBJ and MTL formats have been proposed by <a href="https://www.dicomstandard.org/wgs/wg-17/">Working Group 17</a> for the Digital Imaging and Communications in Medicine (DICOM) standard as the next 3D model format to be supported for encapsulation in a DICOM wrapper.  See slides on <a href="http://dicom.nema.org/Dicom/News/March2019/docs/sups/sup208-slides.pdf">Supplement 208 Extension of DICOM Encapsulation of 3D Manufacturing Models</a> from March 2019.</p>
			<p>The compilers of this resource are not aware of any use of the MTL format other than in association with <fddLink id="fdd000507"> Wavefront OBJ</fddLink> files.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
		</fdd:adoption>
		<fdd:licensingAndPatents>See <fddLink id="fdd000507">Wavefront OBJ</fddLink>.</fdd:licensingAndPatents>
		<fdd:transparency>As a plain text ASCII file, an MTL file can be viewed and modified using a text editor.</fdd:transparency>
		<fdd:selfDocumentation>
			<p>No support for embedded metadata.  According to <a href="http://people.math.sc.edu/Burkardt/data/mtl/mtl.html">MTL Files
Material Definitions for OBJ Files</a> by John Burkardt, lines starting with # represent comments.  Some tools that export MTL files add comments to identify the tool and version that were used to create the MTL file. </p>
			<p>
				<b>Accessibility Features</b>
			</p>
			<p>Accessibility features for 3D model formats include audio descriptions for screen readers to enable user interactivity events such as object selection, rotation and zoom, alt text for image forms, color contrast definition as well as caption and subtitle support.</p>
			<p>MTL, like OBJ, has limited direct support, however, other than data stored as plain text which makes it more available to translate for screen readers. Some additional functionality may be supported with software implementation. </p>
		</fdd:selfDocumentation>
		<fdd:externalDependencies>May refer to supplementary texture map files.  Most software  expects these files to be stored in the same directory as the MTL file.</fdd:externalDependencies>
		<fdd:techProtection>No concerns.</fdd:techProtection>
	</fdd:sustainabilityFactors>
	<fdd:qualityAndFunctionalityFactors>
		<fdd:otherQF>
			<fdd:factor>
				<fdd:tag>3D Model Geometry</fdd:tag>
				<fdd:note>See <fddLink id="fdd000507">Wavefront OBJ</fddLink>.</fdd:note>
			</fdd:factor>
			<fdd:factor>
				<fdd:tag>3D Model Appearance</fdd:tag>
				<fdd:note>
					<p>An MTL file is entirely concerned with characteristics of a surface material that control the appearance of a 3D object.  Keywords/statements  in the MTL specification are based on the <a href="https://en.wikipedia.org/wiki/Phong_reflection_model">Phong Reflection Model</a>.</p>
					<p>A <a href="http://exocortex.com/blog/extending_wavefront_mtl_to_support_pbr">proposal to extend the MTL format</a> with statements to express the Physically Based Rendering (PBR) model was made in 2015 by Exocortex. Some of the new keywords from the proposal can be found in MTL files available online.  Some are also mentioned in documentation and help files for some applications.  See <a href="#notes">Notes</a> below on Extensions to MTL for examples.  The compilers of this resource have not determined the degree to which the proposed extension is in wide use in its entirety.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
				</fdd:note>
			</fdd:factor>
			<fdd:factor>
				<fdd:tag>3D Model Scene</fdd:tag>
				<fdd:note>See <fddLink id="fdd000507">Wavefront OBJ</fddLink>.</fdd:note>
			</fdd:factor>
			<fdd:factor>
				<fdd:tag>3D Model Animation</fdd:tag>
				<fdd:note>See <fddLink id="fdd000507">Wavefront OBJ</fddLink>.</fdd:note>
			</fdd:factor>
		</fdd:otherQF>
	</fdd:qualityAndFunctionalityFactors>
	<fdd:fileTypeSignifiers>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>mtl</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>Defined in specification.  See also <a href="https://www.iana.org/assignments/media-types/model/mtl">IANA registration from 2020</a>.</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>model/mtl</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>See <a href="https://www.iana.org/assignments/media-types/model/mtl">IANA registration from 2020</a>.</fdd:note>
			</fdd:internetMediaType>
			<fdd:magicNumbers>
				<fdd:sigValues>
					<fdd:sigValue>ASCII: newmtl</fdd:sigValue>
					<fdd:sigValue>Hex: 6E65776D746C</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>There may be white space or comments before the first newmtl statement.</fdd:note>
			</fdd:magicNumbers>
			<fdd:other>
				<fdd:tag>Other</fdd:tag>
				<fdd:values>
					<fdd:sigValueNA>See note.</fdd:sigValueNA>
					<fdd:note>NARA File Format Preservation Plan ID has no corresponding entry as of February 2025.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Pronom PUID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>fmt/1211</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="http://www.nationalarchives.gov.uk/pronom/fmt/1211">http://www.nationalarchives.gov.uk/pronom/fmt/1211</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Wikidata Title ID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Q20965861</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="https://www.wikidata.org/wiki/Q20965861">https://www.wikidata.org/wiki/Q20965861</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
		</fdd:signifiersGroup>
	</fdd:fileTypeSignifiers>
	<fdd:notes>
		<fdd:general>
			<p>
				<b>Features in the MTL specification not typically supported in 2019</b>:  The specification from the 1990s, originally tailored for use with a particular 3D modeling and visualization system, includes a substantial number of options that are probably not supported in today&apos;s software and are not applicable for 3D printing.  For example, the specification allows the characteristics involving color to be specified in one of three ways, based on <a href="https://en.wikipedia.org/wiki/RGB_color_model">RGB</a>, <a href="https://en.wikipedia.org/wiki/CIE_1931_color_space#Definition_of_the_CIE_XYZ_color_space">CIE XYZ</a>, or a <i>spectral</i> curve in a format developed by Wavefront Technologies with a .rfl extension.  The compilers of this resource have not located documentation for the .rfl format and have found software utilities that only support the use of RGB.  [See, for example, the <a href="https://github.com/JuliaIO/WavefrontObj.jl/blob/master/src/mtl.jl">mtl.jl</a> module of Wavefront Obj Importer.]</p>
			<p>In addition, some of the formats listed in the specification as usable as texture maps are not recognized today. Support is not typically available for supplementary files with the following extensions: .mpc, .mps, .mpb, .cxc, .cxs, and .cxb.  [See, for example, <a href="http://cocoadocs.org/docsets/NinevehGL/0.9.3/Classes/NGLParserOBJ.html">NGLParserOBJ</a> module of NinevehGL.]  Common image formats, such as <fddLink id="fdd000149">JPEG</fddLink>, <fddLink id="fdd000153">PNG</fddLink>, and <fddLink id="fdd000189">BMP</fddLink> can be used for texture maps.  Some tools accept images in the <fddLink id="fdd000180">TGA</fddLink> format that was common when the MTL format was introduced; others convert TGA images losslessly to PNG on import (e.g., <a href="https://help.sketchfab.com/hc/en-us/articles/202600873-Materials-and-Textures">Sketchfab</a>) or require that TGA texture maps be converted before import.</p>
			<p>The <i>illum</i> statement specifies the <b>illumination model</b> to use for the material, using a set of codes for associated lighting and shading effects.  Each code (from 0-10 in the specification) corresponds to a set of equations that would have been applied in Advanced Visualizer taking into account the interaction of light sources with object surfaces to determine the displayed color.  From a mathematical perspective, they correspond to different <a href="https://en.wikipedia.org/wiki/Bidirectional_reflectance_distribution_function">Bidirectional reflectance distribution functions</a>.  All values other than 0 are designed to take account of sources of light when the shapes defined in an OBJ file are viewed in a context that incorporates specifications for lighting.  However, an OBJ file describes only the surface geometry of an object and does not incorporate any elements related to light sources.  Only a few of the <i>illum</i> values seem to be found in MTL files in practice to judge from resources online. For example, the abbreviated version of the MTL specification at <a href="https://people.cs.clemson.edu/~dhouse/courses/405/docs/brief-mtl-file-format.html">Alias/WaveFront Material (.mtl) File Format</a> describes only the first three options.</p>
			<ul>
				<li>
					<i>illum 0</i>: a constant color illumination model, using the Kd for the material</li>
				<li>
					<i>illum 1</i>: a diffuse illumination model using Lambertian shading, taking into account Ka, Kd, the intensity and position of each light source and the angle at which it strikes the surface. </li>
				<li>
					<i>illum 2</i>:  a diffuse and specular illumination model using Lambertian shading and Blinn&apos;s interpretation of Phong&apos;s specular illumination model, taking into account Ka, Kd, Ks, and the intensity and position of each light source and the angle at which it strikes the surface.</li>
			</ul>
			<p>The other values listed in the specification for <i>illum</i> probably reflect choices that could be made by a user of Advanced Visualizer.  According to <a href="https://forums.pinshape.com/t/editing-mtl-files-for-color-clara-io-viewing/159">Editing MTL files for color Clara.io viewing</a>, a post from 2014, Clara.io is only interested in <i>illum</i> values of 0 and 1, while Maya always uses 4 on export.  It seems probable that the <i>illum</i> parameter is ignored (i.e., assumed to be 0) for 3D printing applications.</p>
			<p>
				<b>Extensions to MTL to support new techniques for realistic rendering</b>: The color keywords in the MTL specification that affect color shading are based on the <a href="https://en.wikipedia.org/wiki/Phong_reflection_model">Phong reflection model</a>, developed by Bui Tuong Phong at the University of Utah, who described it in his 1973 Ph.D. dissertation.  The model describes the way a surface reflects light as a combination of the diffuse reflectivity (Kd) of a rough surface, which typically contributes most of the color to an object, with the specular reflectivity (Ks) of a shiny surface, which yields highlights.  The model also includes an ambient reflectivity (Ka) term to account for the small amount of light that is scattered about the entire scene.  In recent years a model known as Physically Based Rendering (PBR) has become popular.  See <a href="https://en.wikipedia.org/wiki/Physically_based_rendering">Wikipedia entry on Physically-Based Rendering</a> and <a href="https://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf">Physically-Based Shading at Disney</a>, a paper from 2012.  In 2015, a <a href="http://exocortex.com/blog/extending_wavefront_mtl_to_support_pbr">proposal to extend the MTL format</a> with statements to express the PBR model was made by Exocortex and support for the new keywords added to the <a href="https://clara.io/">Clara.io</a> product.  Among the keywords proposed as new were <i>Ke</i> and <i>map_Ke</i> for emissive color equivalents to <i>Kd</i> and <i>map_Kd</i>.  These two keywords may have been in use since before the Exocortex proposal, since they appear in the <a href="http://cgkit.sourceforge.net/doc2/objmaterial.html">OBJ material</a> section in the Python Computer Graphics Kit 2.0.0 documentation, which has a copyright date of 2009.  Another keyword introduced as new in the Exocortex proposal is <i>norm</i>.  In September 2019, the <a href="https://threejs.org/examples/jsm/loaders/MTLLoader.js">MTL loader</a> for the three.js Javascript library recognizes <i>Ke</i>, <i>map_Ke</i>, and <i>norm</i>, but not the other keywords in the Exocortex proposal. Meanwhile, the <a href="https://en.wikipedia.org/wiki/Wavefront_.obj_file#Material_template_library">Wikipedia description of MTL</a> indicates that Microsoft has also introduced two keywords for use in the DirectX toolkit installed with recent versions of Windows.</p>
			<p>
				<b>Other potential interoperability issues:</b> According to the <a href="https://docs.lightwave3d.com/lw2019/reference/interchange">Interchange</a> section of the Lightwave 3D reference manual, &quot;OBJs textured with image maps or numeric values in other packages will come in textured but nodal or procedural textures will not translate in either direction. Autodesk’s Maya and Max reverse diffuse and ambient, so the default behavior of LightWave now is to reverse <i>Ka</i> &amp; <i>Kd</i> for OBJ export. If you find that textures are being transferred incorrectly, try switching this off in the Layout Preferences OBJ Tab or Modeler Preferences OBJ Tab.&quot;</p>
			<p>According to  <a href="https://helpx.adobe.com/dimension/using/supported-file-types.html#export-models">Supported file types | 3D models | Exporting models from Dimension</a>, &quot;OBJ’s companion MTL file should preserve the look of your Dimension/Substance materials almost entirely, but any customization or interactivity is lost. Dimension&apos;s decals are &quot;baked&quot; into the textures of the underlying material which can decrease the resolution of the material. Not every 3D program supports loading MTLs to the same extent, so your exported object may look different depending on the program you take it to. Where possible, standard MTL property labels are used, but because of the limitation of the format, some uncommon properties will only load properly into Dimension.&quot;</p>
		</fdd:general>
		<fdd:history>
			<p>Although the MTL format was documented by 1995, the date of its introduction is not known to the compilers of this resource.  Documentation for the <a href="https://www.okino.com/conv/imp_wave.htm">Wavefront OBJ Importer</a> by Okino suggests that before the introduction of the MTL format, an earlier method for applying a texture map to a surface object was via a <i>usemap</i> statement in the OBJ file.  The Okino importer would create equivalent MTL-style definitions for any texture maps referenced in this way.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
		</fdd:history>
	</fdd:notes>
	<fdd:formatSpecifications>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>http://paulbourke.net/dataformats/mtl/</link>
					<tag>MTL material format (Lightwave, OBJ) | Excerpt from FILE FORMATS, Version 4.2
October 1995.  Copyright 1995, Alias|Wavefront, Inc.</tag>
					<comment>Original documentation created by: Diane Ramey, Linda Rose, and Lisa Tyerman.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>The way the MTL file is referenced in a Wavefront OBJ file is described in the specification for the OBJ file:</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf</link>
							<tag>Copy of Appendix B1 of Advanced Visualizer manual | from Wavefront Technologies around 1992</tag>
							<comment>Text as distributed with version 3 of Wavefront&apos;s Advanced Visualizer software.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
		</fdd:urls>
	</fdd:formatSpecifications>
	<fdd:usefulReferences>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>https://people.cs.clemson.edu/~dhouse/courses/405/docs/brief-mtl-file-format.html</link>
					<tag>Alias/WaveFront Material (.mtl) File Format</tag>
					<comment>Adapted from original documentation created by:
Diane Ramey, Linda Rose, and Lisa Tyerman
[Copyright 1995 Alias|Wavefront, Inc.], modified and simplified by Donald House, 1/12/2011</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/Wavefront_.obj_file#Material_template_library</link>
					<tag>Material Template Library section in Wikipedia entry for Wavefront OBJ file</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://people.math.sc.edu/Burkardt/data/mtl/mtl.html</link>
					<tag>MTL Files:
Material Definitions for OBJ Files | summary with example files</tag>
					<comment>From John Burkardt&apos;s data formats resource at the University of South Carolina.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://people.math.sc.edu/Burkardt/data/obj/obj.html</link>
					<tag>OBJ Files:
A 3D Object Format | sample files</tag>
					<comment>From John Burkardt&apos;s data formats resource at the University of South Carolina.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://fileformats.archiveteam.org/wiki/Wavefront_MTL</link>
					<tag>Wavefront MTL | from Let&apos;s Solve the File Format Problem!</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>The resources below include access to code that reveals which MTL stements/keywords are recognized on import or used on export:</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://github.com/assimp/assimp/blob/master/code/Obj/ObjFileMtlImporter.cpp</link>
							<tag>ObjFileMtlImporter.cpp | module in Open Asset Import Library (assimp)</tag>
							<comment>As of September 2019, this module supports the Ke and map-Ke statements as well as the Ka, Kd, Ks statements in original specification. </comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://threejs.org/examples/jsm/loaders/MTLLoader.js</link>
							<tag>MTL Loader from Three.js | Javascript library for 3D rendering</tag>
							<comment>This Javascript provides a good source for identifying which MTL features are widely supported.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.lightwave3d.com/assets/plugins/entry/mtl-importexport/</link>
							<tag>A set of scripts for handling MTL files in Lightwave 3D</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>http://www.mikegreen.name/Lscripts.html#MTL_ImportExport</link>
							<tag>MTL Import/Export V1.6 for Lightwave 3D</tag>
							<comment>One of the few tools that mentions the non-RGB color models the original MTL specification allows.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://3dinsider.com/stl-vs-obj/</link>
					<tag>STL vs. OBJ: Which Should You Use? [for 3D printing]</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/Phong_reflection_model</link>
					<tag>Wikipedia entry for Phong reflection model</tag>
					<comment>This model is used as the basis for color and illumination statements in the original MTL format</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://exocortex.com/blog/extending_wavefront_mtl_to_support_pbr</link>
					<tag>Extending Wavefront MTL for Physically-Based Rendering (2015)</tag>
					<comment>Proposal from Exocortex to extend MTL format.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://grabcad.com/tutorials/create-an-obj-cube-with-your-favorite-images</link>
					<tag>Tutorial: Create an OBJ Cube With Your Favorite Images</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://docs.lightwave3d.com/lw2019/reference/interchange</link>
					<tag>Lightwave3D 2019 Interchange | from reference manual</tag>
					<comment>Mentions support for OBJ format and states that Autodesk products Maya and Max reverse diffuse and ambient parameters.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://helpx.adobe.com/dimension/using/supported-file-types-materials.html</link>
					<tag>Supported file types: Materials | from help for Adobe Dimension</tag>
					<comment>Adobe Dimension will import an MTL file if it is in the same directory as an OBJ file being imported.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://knowledge.autodesk.com/support/3ds-max/learn-explore/caas/CloudHelp/cloudhelp/2019/ENU/3DSMax-Data-Exchange/files/GUID-87B0A138-8348-4DCB-87EE-585841A27318-htm.html</link>
					<tag>Import Wavefront (OBJ) Files | from help for Data Exchange in 3DS MAX from Autodesk.</tag>
					<comment>According to this help page, export and import of MTL files attached to OBJ files is fully supported.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://cocoadocs.org/docsets/NinevehGL/0.9.3/Classes/NGLParserOBJ.html</link>
					<tag>NGLParserOBJ | from NinevehGL graphics library</tag>
					<comment>Has good summary of MTL features that were supported in this project.  Lists old texture map formats as not supported.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://forums.pinshape.com/t/editing-mtl-files-for-color-clara-io-viewing/159</link>
					<tag>Editing MTL files for color Clara.io viewing (2014)</tag>
					<comment>Mentions that Clara.io is only interested in illum values of 0 and 1, while Maya always uses 4 on export.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Working Group 17 for the Digital Imaging and Communications in Medicine (DICOM) standard is responsible for expanding the standard as a wrapper for 3D content.  Based on a survey of use of 3D formats in medicine, support for encapsulating STL was added in DICOM 2018b.  <fddLink id="fdd000490">X3D</fddLink>/VRML, OBJ, and 3MF are also widely used.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.dicomstandard.org/wgs/wg-17/</link>
							<tag>DICOM Working Group 17</tag>
							<comment>Expansion of DICOM to support encapsulation of additional formats is planned.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>http://dicom.nema.org/Dicom/News/March2019/docs/sups/sup208-slides.pdf</link>
							<tag>Overview of Supplement 208: Extension of DICOM Encapsulation of 3D Manufacturing Models | Slides from March 2019</tag>
							<comment>Indicates that consideration of DICOM encapsulation of OBJ and MTL formats is well advanced.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://www.nationalarchives.gov.uk/pronom/fmt/1211</link>
					<tag>PRONOM entry for fmt/1211</tag>
					<comment>Information in PRONOM on MTL format.  PUID: fmt/1211.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.wikidata.org/wiki/Q20965861</link>
					<tag>Wikidata entry for Q20965861</tag>
					<comment>Information in Wikidata for Material Template Library.  Wikidata Title ID: Q20965861</comment>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:usefulReferences>
</fdd:FDD>
