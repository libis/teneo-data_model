<?xml version="1.0" encoding="UTF-8"?>
<fdd:FDD id="fdd000443" titleName="ECMAScript Language (ECMA-262), including JavaScript" shortName="ECMAScript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fdd="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1" xsi:schemaLocation="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1 http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1/fdd-v1-2.xsd">
	<fdd:properties>
		<fdd:gdfrGenreSelection>
			<fdd:gdfrGenre>text</fdd:gdfrGenre>
		</fdd:gdfrGenreSelection>
		<fdd:formatCategories>
			<fdd:category>file-format</fdd:category>
			<fdd:category>encoding</fdd:category>
		</fdd:formatCategories>
		<fdd:gdfrComposition>unitary</fdd:gdfrComposition>
		<fdd:gdfrForm>text</fdd:gdfrForm>
		<fdd:gdfrConstraint>structured</fdd:gdfrConstraint>
		<fdd:gdfrBasis>symbolic</fdd:gdfrBasis>
		<fdd:updates>
			<fdd:date>2019-10-28</fdd:date>
		</fdd:updates>
		<fdd:draftStatus>Full</fdd:draftStatus>
	</fdd:properties>
	<fdd:identificationAndDescription>
		<fdd:fullName>ECMA-262: ECMAScript Language Specification.  [Formerly also published as ISO/IEC 16262.]  Often referred to as JavaScript, the most well known implementation of the ECMAScript language.</fdd:fullName>
		<fdd:keywords>
			<fdd:keyword>programming languages</fdd:keyword>
		</fdd:keywords>
		<fdd:description>
			<p>ECMAScript is a programming language, developed and maintained as an international standard under the auspices of the  <a href="http://www.ecma-international.org/memento/tc39-m.htm">Technical Committee (TC) 39</a> of <a href="https://www.ecma-international.org/">Ecma International</a> and published openly as <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</a> (ECMAScript Language Specification) in a series of <a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">editions</a>, beginning in June 1997.  [Note: Ecma International was formerly the European Computer Manufacturers Association and known by its acronym, ECMA; names for ECMA standards continue to use the upper-case form.]  Technically identical specifications for ECMAScript were published as ISO/IEC 16262 in <a href="https://www.iso.org/standard/33835.html">1998</a>, <a href="https://www.iso.org/standard/33835.html">2002</a>, and <a href="https://www.iso.org/standard/55755.html">2011</a>.  To facilitate an annual update cycle for the language, <a href="https://www.iso.org/standard/73002.html">ISO/IEC 22275</a> (ECMAScript Specification Suite) was published in 2018 to incorporate updated editions of ECMA-262 by reference.</p>
			<p>Given the complex but extremely close relationship between <a href="https://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a> and <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a>, the compilers of this resource have chosen to produce a single format description that covers both.  To describe the current relationship as briefly as possible, ECMAScript is the formal standard on which JavaScript is based, while JavaScript is often described as an implementation or a dialect of ECMAScript.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
			<p>The language now standardized as ECMAScript was <a href="https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/">invented</a> by Brendan Eich at <a href="https://en.wikipedia.org/wiki/Netscape">Netscape</a> Communications Corporation to support cross-platform scripting.  It first appeared in that company&apos;s Navigator 2.0 browser, released in 1995.  After trying some preliminary names, Netscape chose the name JavaScript for the language.  See the <a href="https://web.archive.org/web/20020606002913/http://wp.netscape.com/newsref/pr/newsrelease67.html">December 1995 press release</a> from Netscape and <a href="https://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems</a> announcing JavaScript as an &quot;open, cross-platform object scripting language for the creation and customization of applications on enterprise networks and the Internet.&quot;  At that point, the plan was to offer the language to W3C (World Wide Web Consortium) and IETF (Internet Engineering Task Force) as an &quot;an open Internet scripting language standard.&quot;   In mid-1996, <a href="https://en.wikipedia.org/wiki/Microsoft">Microsoft</a> introduced an equivalent in <a href="https://en.wikipedia.org/wiki/Internet_Explorer_3">Internet Explorer 3.0</a>, using the name JScript.  In a <a href="https://web.archive.org/web/19981203070212/http://cgi.netscape.com/newsref/pr/newsrelease289.html">November 1996 press release</a>, Netscape announced that it had submitted JavaScript to Ecma International for consideration as an industry standard.  To produce the standard, Ecma formed TC39.  Ecma&apos;s <a href="https://www.ecma-international.org/wp-content/uploads/Ecma-memento-1997-public.pdf">Memento yearbook for 1997</a> lists members of TC39 representing Sun Microsystems, Netscape, Microsoft Corporation, Apple, IBM, Hewlett Packard, Digital Equipment Corporation, and more.  The name &quot;ECMAScript&quot; was chosen as a compromise with no association with any particular company.   The ECMAScript Language Specification was adopted by the Ecma General Assembly as ECMA-262 in June 1997.  The language drew from JavaScript, but also on other sources, including <a href="https://en.wikipedia.org/wiki/JScript">JScript</a> from Microsoft.  JavaScript and JScript are now considered dialects of the ECMAScript language and implementations of the ECMAScript standard.  Of these dialects, JavaScript remains the most well known and in many contexts the term &quot;JavaScript&quot; is used where &quot;ECMAScript&quot; might be more appropriate but would not be immediately recognized. For example, the tutorial <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">A re-introduction to JavaScript</a> has a note, &quot;Because it is more familiar, we will refer to ECMAScript as &apos;JavaScript&apos; from this point on.&quot;</p>
			<p>In 2016, Ecma TC39 began to publish a new edition of ECMA-262 every year on a schedule, as the large working group, including representatives from all major browser vendors and many media companies and internet platforms, develops consensus on added features.  Each annual release of ECMA-262 includes any new features that have been approved using the five-stage <a href="https://tc39.es/process-document/">TC39 Process</a>. For a feature to reach the &quot;finished&quot; stage, ready for inclusion in ECMA-262, it must be included in implementations that have been shipped and at least two compatible implementations must have passed acceptance tests established by TC39.   These new editions are often referred to by year, sometimes as ES2016, ES2017, etc.  See for example, <a href="https://flaviocopes.com/ecmascript/">The Complete ECMAScript 2015-2019 Guide</a> and <a href="https://kangax.github.io/compat-table/es2016plus/">ECMAScript compatibility table (ES2016+)</a>.  For additional discussion on the relationship between ECMAScript and JavaScript, see <a href="#notes">Notes</a> and <a href="#useful">Useful References</a> below.</p>
			<p>An <a href="http://www.ecma-international.org/ecma-262/10.0/index.html#sec-overview">Overview</a> of the ECMAScript language is provided in the standard and includes an important statement, emphasized in bold in the following extract:</p>
			<ul>
				<li>&quot;ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment. <b>ECMAScript as defined here is not intended to be computationally self-sufficient; indeed, there are no provisions in this specification for input of external data or output of computed results.</b> Instead, it is expected that the computational environment of an ECMAScript program will provide not only the objects and other facilities described in this specification but also certain environment-specific objects, whose description and behaviour are beyond the scope of this specification except to indicate that they may provide certain properties that can be accessed and certain functions that can be called from an ECMAScript program.&quot;</li>
			</ul>
			<p>Other points from the Overview in the ECMAScript specification are worth mentioning.  ECMAScript, like its predecessor JavaScript, was originally designed to be used as a <a href="https://en.wikipedia.org/wiki/Scripting_language">scripting language</a> for the Web, providing a mechanism &quot;to enliven Web pages in browsers and to perform server computation as part of a web-based client-server architecture.&quot;  ECMAScript syntax intentionally resembles Java syntax but in a relaxed form to enable it to serve as an easy-to-use scripting language.  Each web browser and server that supports ECMAScript must supply its own &quot;host environment.&quot;  For example, a browser provides an ECMAScript host environment for client-side computation including, for instance, objects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, and input/output.  A web server must provide a complementary host environment for server-side computation including objects representing requests, clients, files, and mechanisms to lock and share data.  For an informative overview of JavaScript support and the host environment in Firefox (from <a href="https://www.mozilla.org/">Mozilla</a>), see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview">JavaScript technologies overview: Introduction</a>.  Firefox has implemented support in a <a href="https://en.wikipedia.org/wiki/JavaScript_engine">JavaScript engine</a> known as <a href="https://en.wikipedia.org/wiki/SpiderMonkey">SpiderMonkey</a> and a &quot;layout engine&quot; known as <a href="https://en.wikipedia.org/wiki/Gecko_(software)">Gecko</a>.  Other browsers have developed their own JavaScript engines, e.g., <a href="https://en.wikipedia.org/wiki/V8_(JavaScript_engine)">V8</a> used by <a href="https://en.wikipedia.org/wiki/Google_Chrome">Chrome</a> and other Google products.</p>
			<p>ECMAScript has evolved to support scripting capabilities in a variety of contexts, including:</p>
			<ul>
				<li>In documents in the <fddLink id="fdd000030">PDF_family</fddLink>. See <a href="https://www.iso.org/standard/71559.html">ISO 21757-1:2020
Document management — ECMAScript for PDF — Part 1: Use of ISO 32000-2 (PDF 2.0)</a>. </li>
				<li>In XML.  See <a href="https://www.iso.org/standard/41002.html">ISO/IEC 22537:2006
Information technology — ECMAScript for XML (E4X) specification</a>
				</li>
				<li>In Microsoft&apos;s .NET framework.  See <a href="https://en.wikipedia.org/wiki/JScript_.NET">Wikipedia entry for JScript .NET</a>.</li>
				<li>In embedded systems.  See <a href="https://www.ecma-international.org/memento/tc53.htm">Ecma International TC53 - ECMAScript Modules for Embedded Systems</a>.</li>
			</ul>
			<p>JavaScript is a programming language with some special characteristics.  The formal specification found in ECMA-262 is not easy to read but there are a number of useful introductions, tutorials, and reference materials for JavaScript available online, including <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/JavaScript_technologies_overview">MDN</a> (formerly the Mozilla Developer Network) and <a href="https://www.w3schools.com/">w3schools.com</a>.   Some people suggest that JavaScript is only a scripting language and not a programming language at all, but as of 2019, the consensus is that it is both; see, for example <a href="https://www.quora.com/Is-JavaScript-a-programming-language/">Is JavaScript a programming language?</a> from Quora. Among the special characteristics are:</p>
			<ul>
				<li>According to <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript">What is JavaScript?</a>, a tutorial from MDN, &quot;JavaScript is a scripting or programming language that allows you to implement complex things on web pages.&quot;  Later in the same tutorial is the more technical description, &quot;JavaScript is a lightweight interpreted programming language. The web browser receives the JavaScript code in its original text form and runs the script from that. From a technical standpoint, most modern JavaScript interpreters actually use a technique called just-in-time compiling to improve performance; the JavaScript source code gets compiled into a faster, binary, format while the script is being used, so that it can be run as quickly as possible. However, JavaScript is still considered an interpreted language, since the compilation is being handled at run time, rather than ahead of time.&quot;</li>
				<li>Unlike programming languages such as C and Java, JavaScript has no main program that controls program flow.  Execution of a chunk of JavaScript code, a <i>script</i>, is triggered by an <a href="https://www.w3schools.com/js/js_events.asp">event</a>.  In web pages, events are often actions taken by a user, perhaps by clicking on a button or tab.  See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">Concurrency model and the event loop</a> from MDN.</li>
				<li>JavaScript allows developers to use alternative programming approaches, <a href="https://en.wikipedia.org/wiki/Procedural_programming">procedural programming</a> and <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a>.  See <a href="https://scalablepath.medium.com/functional-vs-procedural-javascript-a43fcf1727b6">Functional vs Procedural JavaScript</a>.  Although JavaScript is object-oriented, it does not feature <i>classes</i>, which are an important part of most object-oriented languages, controlling inheritance.  Instead, it uses a mechanism based on so-called <i>prototypes</i> to support inheritance. See, for example, <a href="https://www.geeksforgeeks.org/introduction-object-oriented-programming-javascript/">Introduction to Object Oriented Programming in JavaScript</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">JavaScript Reference: Classes</a> from MDN.  The latter states, &quot;JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript&apos;s existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.&quot;</li>
			</ul>
			<p>Importantly, the ECMAScript specification has an annex (Annex B: Additional ECMAScript Features for Web Browsers) that lists legacy features.  The purpose of the annex is to describe &quot;various legacy features and other characteristics of web browser based ECMAScript
implementations. All of the language features and behaviours specified in this annex have one or more undesirable
characteristics and in the absence of legacy usage would be removed from this specification. However, the usage of these
features by large numbers of existing web pages means that web browsers must continue to support them. The
specifications in this annex define the requirements for interoperable implementations of these legacy features.&quot;  A guiding principle for TC39 is “Don’t Break the Web”.  See <a href="https://medium.com/braintree-product-technology/a-year-plus-a-little-on-tc39-a1acb87eb862">A Year (plus a little) on TC39 (January 2019)</a> by Aki Rose.</p>
		</fdd:description>
		<fdd:shortDescription>a programming language, originally designed to be used as a scripting language for the World Wide Web.  ECMAScript is the approved standard for JavaScript and JavaScript is often described as a dialect or implementation of ECMAScript.  As of 2019, Ecma TC39 publishes a new edition of ECMA-262 every year, adding features as the working group develops consensus and when at least two interoperable implementations exist.  Formerly also published as ISO/IEC 16262.  Incorporated by reference into ISO/IEC 22275:2018.</fdd:shortDescription>
		<fdd:relationships>
			<fdd:relationship>
				<fdd:typeOfRelationship>Used by</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000475</fdd:id>
					<fdd:shortName>HTML_family</fdd:shortName>
					<fdd:titleName>HyperText Markup Language (HTML) Format Family</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Used by</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000030</fdd:id>
					<fdd:shortName>PDF_family</fdd:shortName>
					<fdd:titleName>Portable Document Format (PDF) Family</fdd:titleName>
				</fdd:relatedTo>
				<fdd:comment>See <a href="https://www.adobe.com/devnet/acrobat/javascript.html">JavaScript for Acrobat</a>.</fdd:comment>
			</fdd:relationship>
		</fdd:relationships>
	</fdd:identificationAndDescription>
	<fdd:localUse>
		<fdd:experience>The Library of Congress acquires files in scripting languages, including ECMAScript variants (primarily JavaScript), associated with documents in HTML collected through its Web Archiving program. See <a href="https://www.loc.gov/programs/web-archiving/about-this-program/">Library of Congress Web Archiving</a>.</fdd:experience>
		<fdd:preference>The Library of Congress collects scripting files and embedded ECMAScript code only as supplementary to other content, such as documents in HTML or PDF formats.  No preference is expressed for such supplementary resources in its <a href="https://www.loc.gov/preservation/resources/rfs/">Recommended Formats Statement</a>.</fdd:preference>
	</fdd:localUse>
	<fdd:sustainabilityFactors>
		<fdd:disclosure>An openly published international standard, developed under the auspices of <a href="https://www.ecma-international.org/technical-committees/tc39/">Ecma Technical Committee (TC) 39</a>.  The first edition of the ECMAScript standard (ECMA-262) was adopted by the Ecma International General Assembly in June 1997.  Since 2015, when the 6th edition was published, TC39 has published a new edition each year, using a multi-stage <a href="https://tc39.es/process-document/">process</a> to guide the evolution of the language.  A <a href="https://tc39.es/ecma262/">working draft</a> and <a href="https://github.com/tc39/proposals/blob/master/README.md">proposals</a> for new features are publicly available.</fdd:disclosure>
		<fdd:documentation>
			<p>The latest published version of the ECMAScript Language Specification can be found as <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</a>.  Earlier versions are available from <a href="https://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">https://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a>.  A working draft for the next version is available at <a href="https://tc39.es/ecma262/">https://tc39.es/ecma262/</a>.</p>
			<p>For versions published as ISO/IEC 16262, see <a href="#specs ">Format Specifications</a> below.</p>
		</fdd:documentation>
		<fdd:adoption>
			<p>The ECMAScript Language has been adopted in a number of application contexts. The most well known context is in web pages and the web servers that deliver those pages.  Implementations in this context are usually referred to as JavaScript. According to <a href="https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70/">The Baseline Interpreter: a faster JS interpreter in Firefox 70</a>, an August 2019 blog post from Mozilla, &quot;Modern web applications load and execute a lot more JavaScript code than they did just a few years ago.&quot;  In addition to direct use of JavaScript by web developers, tools have emerged to facilitate its use.  For example, in 2005, the term Ajax, standing for Asynchronous JavaScript + XML, a technical approach developed by Google for use in applications like Gmail and Google Maps.  See the 2005 article, <a href="https://pdfs.semanticscholar.org/c440/ae765ff19ddd3deda24a92ac39cef9570f1e.pdf">Ajax: A New Approach to Web Applications</a> by Jesse James Garrett.   Popular JavaScript code libraries that support straightforward interactivity and are packaged with some website development platforms include <a href="https://en.wikipedia.org/wiki/JQuery">jQuery</a> (first released in 2006) and <a href="https://en.wikipedia.org/wiki/JQuery">Bootstrap</a> (first released in 2011). Several frameworks for building websites that make heavier use of JavaScript have emerged, including <a href="https://angularjs.org/">AngularJS</a> in 2009, <a href="http://backbonejs.org/">Backbone.js</a> in 2010, <a href="https://www.emberjs.com/">Ember.js</a> in 2011, and <a href="https://en.wikipedia.org/wiki/React_(web_framework)">React.js</a> in 2013.</p>
			<p>JavaScript is used to some degree in a very large percentage of websites.  A W3Techs survey from August 2010 <a href="https://w3techs.com/technologies/overview/client_side_language">(updated survey)</a> found that 88.2% of the top 1 million sites as ranked by Alexa used JavaScript somewhere on the website.  The equivalent W3Techs survey in July 2019 found that 95.2% of the top 10 million sites used JavaScript.  This statistic does not capture how heavily a site exploits scripting; a single contact form using JavaScript would lead to a website being counted.  The <a href="https://w3techs.com/technologies/overview/javascript_library/all">W3Techs survey of usage of JavaScript libraries</a> shows the popularity of the JavaScript libraries: jQuery (used in 74.0% of websites in July 2019) and Bootstrap (19.2% in July 2019).</p>
			<p>Browsers incorporate JavaScript/ECMAScript &quot;engines&quot; to interpret and execute JavaScript code.  For example, Firefox uses <a href="https://web.archive.org/web/20210601152810/https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey">SpiderMonkey</a> and Chrome uses <a href="https://v8.dev/">V8</a>.  See Wikipedia&apos;s <a href="https://en.wikipedia.org/wiki/List_of_ECMAScript_engines">List of ECMAScript engines</a> for more examples.  Support for individual ECMAScript features by various browsers and engines is documented in <a href="https://kangax.github.io/compat-table/es6/">Kangax Compatibility Tables for ES6</a> (i.e., ES2015) and <a href="https://kangax.github.io/compat-table/es2016plus/">Kangax Compatibility Tables for ES2016+</a> (i.e., for versions of ECMA-262 published since 2016).</p>
			<p>Although the major browsers steadily introduce versions that support the features introduced in the new versions of ECMA-262, web developers have to design on the assumption that many users will be using older browsers.  A number of tools and techniques have been developed to allow developers to take advantage of new features as they design, but supplement or modify the JavaScript to allow use in older browsers.  Two important tools are known as <a href="https://developer.mozilla.org/en-US/docs/Glossary/Polyfill">polyfills</a> and <a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript#JavaScript_transpiling">transpilers</a>.  <a href="https://babeljs.io/">Babel JS</a> is a popular toolkit that is mainly used to convert code in ECMAScript from 2015 and later into a backwards-compatible version of JavaScript that will work in current and older browsers or environments. Babel JS incorporates a transpiler, translating modern JavaScript code into a previous standard and integrates polyfills that will implement new features missing from the older standard.  As of 2019, Babel uses polyfills derived from <a href="https://github.com/zloirock/core-js">core.js</a>, a library of polyfills. </p>
			<p>
				<a href="https://nodejs.org/en/">Node.js</a> is a widely used open-source, cross-platform, JavaScript runtime environment, built on Chrome&apos;s V8 JavaScript engine, that executes JavaScript code in contexts other than browsers.  For example, Node.js facilitates use of JavaScript for command line tools and server-side scripting.  The support in Node.js for individual features in ES2015 and later versions of ECMA-262 is documented in <a href="https://node.green/">https://node.green/</a>.</p>
			<p>Examples of adoption of ECMAScript in non-browser contexts include: <a href="https://www.iso.org/standard/71559.html">ECMAScript for PDF</a>; <a href="https://www.iso.org/standard/41002.html">ECMAScript for XML (E4X)</a>; <a href="https://en.wikipedia.org/wiki/JScript_.NET">JScript for .NET</a>; in embedded systems (in the Internet Of Things) [see <a href="https://www.ecma-international.org/memento/tc53-m.htm">TC53 - ECMAScript Modules for Embedded Systems</a>].  <a href="../contact_format.shtml">Comments welcome</a>.</p>
		</fdd:adoption>
		<fdd:licensingAndPatents>No concerns.  Covered by <a href="https://www.ecma-international.org/memento/Policies/Ecma_Royalty-Free_Patent_Policy_Extension_Option.htm">Ecma International Royalty-Free Patent Policy</a>. See also <a href="https://www.ecma-international.org/policies/by-ipr/code-of-conduct-in-patent-matters/">Ecma Code of Conduct in Patent Matters</a>.</fdd:licensingAndPatents>
		<fdd:transparency>
			<p>As with most programming languages ECMAScript code is in readable text.  Technically, it is <i>binary source text</i> as defined in <a href="https://tools.ietf.org/html/rfc4329">RFC 4329</a>, i.e, &quot;a textual data object that
represents source text encoded using a character encoding scheme.&quot;  The ECMAScript specification does not prescribe encodings permitted for storing and transmitting ECMAScript source text; it merely requires that ECMAScript source text be a sequence of Unicode code points. If not specified otherwise, a browser assumes the source code of any program to be written in the local character encoding scheme (<i>charset</i>), which varies by country. Hence, in the browser context, it is often recommended that the charset used for embedded program code be declared explicitly, e.g., by using the same encoding declared in the &lt;head&gt; section of a parent HTML document or declared in a &lt;script&gt; tag that includes or refers to the source text.  To avoid interoperability problems, it is also often recommended that only ASCII characters be used and that UTF-8 encoding be used.  According to <a href="https://exploringjs.com/impatient-js/ch_unicode.html#encodings-used-in-web-development-utf-16-and-utf-8">Encodings used in web development: UTF-16 and UTF-8 from JavaScript for Impatient Programmers</a>, &quot;HTML and JavaScript are almost always encoded as UTF-8 these days.&quot;</p>
			<p>As a result, most ECMAScript or JavaScript files can be viewed in simple text editors.  However, Javascript code to be used in HTML pages is often &quot;minified,&quot; removing all unnecessary characters, such as spaces, tabs, line-breaks, and comments, all of which can make the source code easy to read, but are not necessary for it to execute.  See <a href="https://en.wikipedia.org/wiki/Minification_(programming)">Wikipedia entry on Minification</a>.</p>
		</fdd:transparency>
		<fdd:selfDocumentation>The only method for describing the intended function of ECMAScript source code or its authorship and provenance is via comments embedded in the code.  However, comments are often removed from the original source code as part of &quot;minification&quot; to reduce the size of the code and make network transfer and execution of the code more efficient.</fdd:selfDocumentation>
		<fdd:externalDependencies>None beyond software for compiling or interpreting source code in the relevant host environment (e.g., web browser, web server, or PDF Reader).</fdd:externalDependencies>
		<fdd:techProtection>The ECMAScript Language Specification provides no support for encryption or other form of technical protection.  However, encryption may be supported through features in a particular host environment, for example, within PDF documents.</fdd:techProtection>
	</fdd:sustainabilityFactors>
	<fdd:qualityAndFunctionalityFactors>
		<fdd:textQF>
			<fdd:normalText>A &quot;document&quot; in ECMAScript or JavaScript is not a general text document.  Like other programming languages, it is a textual file with defined special-purpose syntax.</fdd:normalText>
		</fdd:textQF>
	</fdd:qualityAndFunctionalityFactors>
	<fdd:fileTypeSignifiers>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>es</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>See <a href="https://www.iana.org/assignments/media-types/application/ecmascript">https://www.iana.org/assignments/media-types/application/ecmascript</a>
				</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>application/ecmascript</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>See <a href="https://www.iana.org/assignments/media-types/application/ecmascript">https://www.iana.org/assignments/media-types/application/ecmascript</a>.  See also <a href="https://www.rfc-editor.org/info/rfc4329">RFC 4329</a>.</fdd:note>
			</fdd:internetMediaType>
			<fdd:other>
				<fdd:tag>Mac OS file type</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>TEXT</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="https://www.iana.org/assignments/media-types/application/ecmascript">https://www.iana.org/assignments/media-types/application/ecmascript</a>
					</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Pronom PUID</fdd:tag>
				<fdd:values>
					<fdd:sigValueNA>See note.</fdd:sigValueNA>
					<fdd:note>PRONOM does not have an entry specifically for an ECMAScript file.  Files transmitted over the Internet for loading with HTML pages are typically identified as JavaScript.  See signifiers for JavaScript files below.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Wikidata Title ID</fdd:tag>
				<fdd:values>
					<fdd:sigValueNA>See note.</fdd:sigValueNA>
					<fdd:note>
						<p>Wikidata does not have an entry in <a href="https://www.wikidata.org/wiki/Wikidata:WikiProject_Informatics/File_formats/Lists/File_formats">Wikidata:WikiProject Informatics/File formats/Lists/File formats</a> specifically for an ECMAScript file format.  Files transmitted over the Internet for loading with HTML pages are typically identified as JavaScript.  See signifiers for JavaScript files below.</p>
						<p>Wikidata does have entries for <a href="https://www.wikidata.org/wiki/Q259138">ECMAScript as a programming language</a> and versions/editions of the ECMAScript specification; see <a href="https://www.wikidata.org/w/index.php?search=&amp;search=ecmascript">Wikidata search for &apos;ECMAScript&apos;</a>.</p>
					</fdd:note>
				</fdd:values>
			</fdd:other>
		</fdd:signifiersGroup>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>js</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>See <a href="https://www.iana.org/assignments/media-types/application/javascript">https://www.iana.org/assignments/media-types/application/javascript</a>.  See also <a href="https://www.rfc-editor.org/info/rfc4329">IETF RFC 4329</a> for registration with IANA.</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>application/javascript</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>See <a href="https://www.iana.org/assignments/media-types/application/javascript">https://www.iana.org/assignments/media-types/application/javascript</a>.  See also <a href="https://www.rfc-editor.org/info/rfc4329">IETF RFC 4329</a> for registration with IANA.  <p>An update to RFC 4329 has been proposed, but not yet approved in an Internet Draft, <a href="https://tools.ietf.org/html/draft-ietf-dispatch-javascript-mjs-05">draft-ietf-dispatch-javascript-mjs-05</a>.  This draft originated in October 2017.</p>
				</fdd:note>
			</fdd:internetMediaType>
			<fdd:other>
				<fdd:tag>Pronom PUID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>x-fmt/423</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>PRONOM entry for JavaScript file.  See <a href="http://www.nationalarchives.gov.uk/PRONOM/x-fmt/423">http://www.nationalarchives.gov.uk/PRONOM/x-fmt/423</a>.  PUID: x-fmt/423.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Wikidata Title ID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Q5924007</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>Wikidata entry for JavaScript file.  See <a href="https://www.wikidata.org/wiki/Q5924007">https://www.wikidata.org/wiki/Q5924007</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
		</fdd:signifiersGroup>
	</fdd:fileTypeSignifiers>
	<fdd:notes>
		<fdd:general>
			<p>
				<b>Relationship between ECMAScript and JavaScript</b>: The relationship between ECMAScript and JavaScript has caused much confusion over the years.  There is a distinction, but in informal contexts the terms are often used interchangeably. For example, Aki Rose, a member of the TC39 committee said in January 2019, &quot;In <a href="https://medium.com/braintree-product-technology/a-year-plus-a-little-on-tc39-a1acb87eb862">this post</a> while explaining where a certain programming language comes from, I use the terms “JavaScript” and “ECMAScript®” interchangeably. There is a difference, but it’s pedantic and not worth getting into today.&quot;  The distinction between them is partly related to history, to the politics and time-frame of standardization, and partly to the context of use.</p>
			<p>Key to the distinction is that the ECMAScript Language Specification is not self-sufficient. Any implementation must extend ECMAScript for a particular host environment.  JavaScript, as the implementation used in browsers, extends ECMAScript with objects from the <a href="https://www.w3schools.com/whatis/whatis_htmldom.asp">Document Object Model for HTML</a> and a <a href="https://www.w3schools.com/js/js_window.asp">Browser Object Model</a>.  As of November 2019, the <a href="https://en.wikipedia.org/wiki/JavaScript">Wikipedia entry for JavaScript</a> states, &quot;JavaScript, often abbreviated as JS, is a high-level, interpreted scripting language that conforms to the ECMAScript specification&quot; and the <a href="https://en.wikipedia.org/wiki/ECMAScript">Wikipedia entry for ECMAScript</a> states, &quot;JavaScript has remained the best-known implementation of ECMAScript.&quot;  A useful discussion of the relationship is at <a href="https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript">What is the difference between JavaScript and ECMAScript?</a> on Stack Overflow.  See <a href="#useful">Useful References</a> below for links to more discussions of the relationship.</p>
			<p>
				<b>Techniques that allow web developers to use new ECMAScript features in older browsers:</b>  An interesting concept that is widely used on the web today to allow web developers to take advantage of new features in HTML or ECMAScript/JavaScript is that of the &quot;<a href="https://developer.mozilla.org/en-US/docs/Glossary/Polyfill">polyfill</a>.&quot;  A polyfill is a piece of code (usually in JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it.  The term was <a href="https://remysharp.com/2010/10/08/what-is-a-polyfill">coined in 2009 by Remy Sharp</a>, and is based on Polyfilla, a well known brand in the United Kingdom of a product roughly equivalent to what would be described as &quot;spackling paste&quot; in the United States.  <a href="https://gomakethings.com/why-i-love-polyfills/">Why I love polyfills</a> provides a simple introduction to how they are used.  Sources of polyfills come in several forms, such as: <a href="https://github.com/zloirock/core-js">core.js</a>, a library of polyfills to incorporate individually or as a whole as JavaScript code; or polyfills for individual features (e.g., <a href="https://www.npmjs.com/package/promise-polyfill">Promise Polyfill</a> for the <i>promise</i> feature).</p>
			<p>A second useful tool is a JavaScript &quot;transpiler.&quot;  A compiler is usually understood as a tool that converts source code in a high-level language to executable machine code.  The term &quot;transpiler&quot; was coined to describe tools that convert code in one high-level language to another high-level lanuage or another version of the same language. <a href="https://en.wikipedia.org/wiki/Babel_(compiler)">Babel</a>, a toolkit widely used by web developers, incorporates a JavaScript transpiler that can transform modern JavaScript code into an older version. Babel can also be used to apply polyfills to emulate new features of ECMAScript.  Other JavaScript transpilers include:<a href="https://buble.surge.sh/">Bublé</a> and <a href="https://github.com/google/traceur-compiler">Traceur</a>.</p>
		</fdd:general>
		<fdd:history>
			<p>See <a href="#useful">Useful References</a> below for a selection of resources that illustrate or describe the early history of JavaScript and its standardization as ECMAScript.</p>
			<p>The common abbreviated names used to refer to versions of ECMAScript over time have been a source of confusion.  Through the 6th edition of ECMA-262, the common abbreviation was based on edition number, e.g., ES5 for the 5th edition.  From 2015, the abbreviation based on the year has been used.  As a result, the version published in 2015 is known both as ES6 and ES2015.  The history of ECMAScript versions and features added prior to 2019 is most helpfully laid out in <a href="https://www.w3schools.com/js/js_versions.asp">JavaScript Versions</a> from w3schools.com.</p>
			<p>Going forward, the situation is intended to be straightforward, for example, with the edition of ECMA-262 published in 2017 being referred to as ES2017. Features added to the ECMAScript specification in years after 2015 are documented as Finished Proposals in <a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md">https://github.com/tc39/proposals/blob/master/finished-proposals.md</a>.</p>
		</fdd:history>
	</fdd:notes>
	<fdd:formatSpecifications>
		<fdd:urls>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Standards from Ecma International related to ECMAScript.  The key specification is ECMA-262, the ECMAScript Language Specification.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>http://www.ecma-international.org/publications/standards/Ecma-262.htm</link>
							<tag>ECMA-262: 
ECMAScript Language Specification (latest version)</tag>
							<comment>ECMA TC39 issues a new edition of ECMA-262 every year.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</link>
							<tag>ECMA-262: 
ECMAScript Language Specification (archive of all versions)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/publications/standards/Ecma-402.htm</link>
							<tag>ECMA-402, ECMAScript Internationalization API Specification (latest edition)</tag>
							<comment>Defines the application programming interface for ECMAScript objects that support programs that need to adapt to the linguistic and cultural conventions used by different human languages and countries.  As for the ECMAScript Language Specification, updated editions of this standard are published every year.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/publications/standards/Ecma-414.htm</link>
							<tag>ECMA-414: ECMAScript Specification Suite (latest edition)</tag>
							<comment>As of November 2019, this is the 3rd Edition, from December 2017, identical to ISO/IEC 22275</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Some editions of the Ecma standards related to ECMAScript were submitted to ISO (through committee ISO/IEC JTC 1/SC 22) for approval as ISO standards.  However, to facilitate an annual update cycle for the language, ISO/IEC 22275 (ECMAScript Specification Suite) was published in 2018 to incorporate updated editions of ECMA-262 by reference.  The earlier ECMAScript Language Specifications published as ISO/IEC 16262 have now been withdrawn.  The withdrawn specifications are listed below for convenient reference.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.iso.org/standard/73002.html</link>
							<tag>ISO/IEC 22275:2018
Information technology — Programming languages, their environments, and system software interfaces — ECMAScript Specification Suite</tag>
							<comment>This standard will not change when component Ecma specifications are updated.  It will only be updated if Ecma specifications are added to or deleted from the suite of Ecma specifications related to ECMAScript.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.iso.org/standard/55755.html</link>
							<tag>ISO/IEC 16262:2011
Information technology — Programming languages, their environments and system software interfaces — ECMAScript language specification</tag>
							<comment>Equivalent to ECMA-262, Edition 5.1</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.iso.org/standard/33835.html</link>
							<tag>ISO/IEC 16262:2002
Information technology - ECMAScript language specification</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.iso.org/standard/29696.html</link>
							<tag>ISO/IEC 16262:1998
Information technology - ECMAScript language specification</tag>
							<comment>Equivalent to ECMA-262, Edition 2.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
		</fdd:urls>
	</fdd:formatSpecifications>
	<fdd:usefulReferences>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/ECMAScript</link>
					<tag>Wikipedia entry for ECMAScript</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources from Ecma International and its Technical Committee TC39, which is responsible for maintaining and developing the ECMAScript Language Specification (ECMA-262) and related standards.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>http://www.ecma-international.org/memento/tc39-m.htm</link>
							<tag>TC39 - ECMAScript | Activities</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/wp-content/uploads/Ecma-memento-1997-public.pdf</link>
							<tag>Ecma Memento 1997 (yearbook)</tag>
							<comment>Page 41 shows the membership of TC39 for 1997.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://tc39.es/process-document/</link>
							<tag>The TC39 Process | applies to the ECMAScript standards </tag>
							<comment>There are five stages: strawperson; proposal, draft, candidate, and finished. The TC39 committee must approve acceptance for each stage.  The last stage requires two compatible implementations and shipping products. </comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/publications/files/ECMA-MEMENTOS/Ecma%20memento%202019%20public.pdf</link>
							<tag>Ecma Memento 2019 (yearbook)</tag>
							<comment>Page 39 shows the membership of TC39 for 2019.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://medium.com/braintree-product-technology/a-year-plus-a-little-on-tc39-a1acb87eb862</link>
							<tag>A Year (plus a little) on TC39 | by Aki Rose</tag>
							<comment>Emphasizes the guiding principle of &quot;Don&apos;t break the web.&quot;</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>IETF RFC 4329: Scripting Media Types (April 2006).  A single RFC was used for registration of media types for both
ECMAScript and JavaScript programming languages and conformance
requirements for implementations of these types.  It registers application/ecmascript and application/java script and declares earlier versions in use (text/ecmascript and text/javascript) as obsolete. Refers to the 3rd Edition of ECMA-262, although the URL given in the RFC goes to the latest version of ECMA-262.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.rfc-editor.org/info/rfc4329</link>
							<tag>IETF RFC 4329: Scripting Media Types (April 2006) | RFC in various formats</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://tools.ietf.org/rfc/rfc4329.txt</link>
							<tag>IETF RFC 4329: Scripting Media Types (April 2006) | RFC in plain text</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources that cover the early history of JavaScript and its standardization as ECMAScript</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/JavaScript</link>
							<tag>Wikipedia entry for JavaScript</tag>
							<comment>States that JavaScript is a high-level, interpreted scripting language that conforms to the ECMAScript specification.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://web.archive.org/web/19970613234917/http://home.netscape.com/eng/mozilla/2.0/handbook/javascript/index.html</link>
							<tag>JavaScript handbook for Netscape Navigator 2.0 (copyright 1995-1996) | Archived by Internet Archive in June 1997</tag>
							<comment>This is the earliest description of JavaScript the compilers of this resource have located.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/</link>
							<tag>Brendan Eich on Creating JavaScript in 10 Days, and What He’d Do Differently Today (2018)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://web.archive.org/web/20020606002913/http://wp.netscape.com/newsref/pr/newsrelease67.html</link>
							<tag>Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet (December 4, 1995)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://web.archive.org/web/20020614052140/http://wp.netscape.com/newsref/pr/newsrelease289.html</link>
							<tag>Industry Leaders to Advance Standardization of Netscape&apos;s JavaScript at Standards Body Meeting (November 1996)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>http://www.benmvp.com/learning-es6-history-of-ecmascript/</link>
							<tag>History of ECMAScript | through 2015</tag>
							<comment>Good description of the period between 1999 and 2009, during which no new edition of ECMAScript was published.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://tylermcginnis.com/ecmascript/</link>
							<tag>ECMAScript, TC39, and the History of JavaScript (2017) | by Tyler McGinnis</tag>
							<comment>Covers early history and the TC39 process for yearly editions introduced in 2016.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources related to confusion over the relationship between ECMAScript and JavaScript and attempts to clarify or explain</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript</link>
							<tag>What is the difference between JavaScript and ECMAScript? | from StackOverflow (2009-2019)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.freecodecamp.org/news/whats-the-difference-between-javascript-and-ecmascript-cba48c73a2b5/</link>
							<tag>What’s the difference between JavaScript and ECMAScript? (2017) | by Michael Aranda </tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://gomakethings.com/wtf-is-ecmascript-and-how-is-it-different-from-javascript/</link>
							<tag>WTF is ECMAScript and how is it different from JavaScript? (February 2019)</tag>
							<comment>States both: &quot;ECMAScript is vanilla JS&quot;; and &quot;ECMAScript (often abbreviated ES) is a standardized version of JavaScript&quot;</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Version histories of  ECMAScript and JavaScript, including lists of features added individually to ECMAScript since 2016.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.w3schools.com/js/js_versions.asp</link>
							<tag>JavaScript Versions and ECMAScript Editions (through 2018)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/JavaScript#Version_history</link>
							<tag>JavaScript Version History (through 2010) | from Wikipedia entry for JavaScript</tag>
							<comment>Maps JavaScript versions (as documented by Mozilla for Firefox) to ECMA-262 editions and support by major browsers (but only through 2010).</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://flaviocopes.com/ecmascript/</link>
							<tag>The Complete ECMAScript 2015-2019 Guide</tag>
							<comment>Explains the change of versioning for ECMAScript after 2015.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://github.com/tc39/proposals/blob/master/finished-proposals.md</link>
							<tag>TC39 Finished Proposals page | features added to ECMAScript since 2016</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://kangax.github.io/compat-table/es2016plus/</link>
							<tag>JavaScript engine compatibility with features from ECMAScript since 2016 edition of ECMA-262.</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources related to practical use of JavaScript in browsers and web servers</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/JavaScript_engine</link>
							<tag>Wikipedia entry for JavaScript engine</tag>
							<comment>A JavaScript engine is a computer program that executes JavaScript (JS) code.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/Node.js</link>
							<tag>Wikipedia entry for Node.js</tag>
							<comment>Node.js is an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside a browser, for example, for server-side scripting.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources related to techniques used by web developers to deal with the problem of wanting to use new features while many users still have old browsers, using <i>polyfills</i> and <i>transpilers</i>.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://javascript.info/polyfills</link>
							<tag>Polyfills | from javascript.info</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://remysharp.com/2010/10/08/what-is-a-polyfill</link>
							<tag>What is a polyfill? | by Remy Sharp, who coined the term</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://developer.mozilla.org/en-US/docs/Glossary/Polyfill</link>
							<tag>Polyfill | from MDN Web Docs Glossary</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://gomakethings.com/why-i-love-polyfills/</link>
							<tag>Why I love polyfills (2017) | post by Chris Ferdinandi on gomakethings.com</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript</link>
							<tag>Handling common JavaScript problems | from MDN Web Docs</tag>
							<comment>Includes discussion of polyfills and transpiling from newer versions of ECMAScript to older versions..</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://github.com/zloirock/core-js</link>
							<tag>Core-js | Modular library for JavaScript.  Includes polyfills for recently added ECMAScript features</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://devopedia.org/transpiler</link>
							<tag>Transpiler | from Devopedia</tag>
							<comment>One use for a transpiler is to generate JavaScript code conforming to an older version of the language to support older browsers.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://babeljs.io/</link>
							<tag>Babel.js | JavaScript compiler/transpiler</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources related to dialects/implementations of ECMAScript other than JavaScript.  </fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.thoughtco.com/javascript-and-jscript-whats-the-difference-2037681</link>
							<tag>JavaScript and JScript : What&apos;s the Difference?
 | from ThoughtCo. (updated in July 2019)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/JScript</link>
							<tag>Wikipedia entry for JScript</tag>
							<comment>Microsoft dialect of ECMAScript used in Internet Explorer. </comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/ActionScript</link>
							<tag>Wikipedia entry for ActionScript</tag>
							<comment>Adobe dialect of ECMAScript, such as Flash and Adobe Air.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://help.adobe.com/en_US/air/html/dev/WS5b3ccc516d4fbf351e63e3d118666ade46-7fa6.html</link>
							<tag>ActionScript basics for JavaScript developers | from Adobe&apos;s  HTML Developer&apos;s Guide for Adobe AIR</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources relating to the challenges associated with archiving websites that use JavaScript</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://support.archive-it.org/hc/en-us/articles/209637043-Known-Web-Archiving-Challenges</link>
							<tag>Known Web Archiving Challenges (2019) | from Archive-It support site</tag>
							<comment>Mentions challenge posed by pagination and other dynamic content generated using JavaScript</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://medium.com/on-archivy/javascript-and-archives-db32bc400263</link>
							<tag>JavaScript and Archives (2015) | by Ed Summers</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>http://tantek.com/2015/069/t1/js-dr-javascript-required-dead</link>
							<tag>js;dr = JavaScript required; Didn’t Read (2015) | blog post by Tantek Çelik</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Standards and proposed standards related to use of ECMAScript in contexts other than HTML or web servers</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.iso.org/standard/71559.html</link>
							<tag>ISO/DIS 21757-1
Document management — ECMAScript for PDF — Part 1: Use of ISO 32000-2 (PDF 2.0)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://standards.iso.org/ittf/PubliclyAvailableStandards/c041002_ISO_IEC_22537_2006(E).zip</link>
							<tag>ISO/IEC 22537:2006  Information technology -- ECMAScript for XML (E4X) specification</tag>
							<comment>ISO/IEC catalog entry is at https://www.iso.org/standard/41002.html</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/memento/tc53.htm</link>
							<tag>Ecma International TC53: ECMAScript Modules for Embedded Systems</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/memento/tc53-2018-003.pdf</link>
							<tag>ECMAScript/JavaScript on Wearables (2018) | white paper outline</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.ecma-international.org/news/invitation-to-ecma-tc53-seminar-tokyo-11-december-2019-10-00-12-00/</link>
							<tag>Invitation to Ecma TC53 seminar: A Modern Approach to Embedded Software</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources related to ECMAScript/JavaScript as a programming language:</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.quora.com/Is-JavaScript-a-programming-language/</link>
							<tag>Is JavaScript a programming language?  Q&amp;A from Quora</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript</link>
							<tag>JavaScript First Steps: What is JavaScript? | tutorial from MDN</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://flaviocopes.com/javascript-introduction/</link>
							<tag>Introduction to the JavaScript Programming Language</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.crockford.com/javascript/javascript.html</link>
							<tag>JavaScript:
The World&apos;s Most Misunderstood Programming Language (2001) | by Douglas Crockford</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Guides for developers</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://developer.mozilla.org/en-US/docs/Web/JavaScript</link>
							<tag>JavaScript  | from MDN (Mozilla Developer Network)</tag>
							<comment>Primarily describes the implementation of ECMAScript used in Firefox.  States that the standard for JavaScript is ECMAScript.  </comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</link>
							<tag>A re-introduction to JavaScript (JS tutorial) | from MDN (Mozilla Developer Network)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>http://eloquentjavascript.net/</link>
							<tag>Eloquent JavaScript: a Modern Introduction to Programming | by Marijn Haverbeke</tag>
							<comment>In 2019, this online book is in its 3rd edition.  The first edition was made available online in 2007.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://exploringjs.com/impatient-js/index.html</link>
							<tag>JavaScript for Impatient Programmers | by Axel Rauschmayer </tag>
							<comment>Most chapters are online.  Skimming the full table of contents conveys a sense of JavaScript/ECMAscript language. </comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://github.com/nzakas/understandinges6</link>
							<tag>Understanding ECMAScript 6 | by Nicholas C. Zakas (2016)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://flaviocopes.com/javascript-unicode/</link>
							<tag>Unicode in JavaScript | from FlaVio Copes</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://www.nationalarchives.gov.uk/PRONOM/x-fmt/423</link>
					<tag>PRONOM entry for x-fmt/423</tag>
					<comment>Information in PRONOM on JavaScript file.   PUID: x-fmt/423</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.wikidata.org/wiki/Q5924007</link>
					<tag>Wikidata entry for Q5924007</tag>
					<comment>Information in Wikidata on JavaScript file. WikiData Title ID: Q5924007</comment>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:usefulReferences>
</fdd:FDD>
