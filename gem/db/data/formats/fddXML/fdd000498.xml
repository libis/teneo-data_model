<?xml version="1.0" encoding="UTF-8"?>
<fdd:FDD id="fdd000498" titleName="glTF (GL Transmission Format) Family" shortName="glTF_family" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fdd="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1" xsi:schemaLocation="http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1 http://www.loc.gov/preservation/digital/formats/schemas/fdd/v1/fdd-v1-1.xsd">
	<fdd:properties>
		<fdd:gdfrGenreSelection>
			<fdd:gdfrGenre>model</fdd:gdfrGenre>
		</fdd:gdfrGenreSelection>
		<fdd:formatCategories>
			<fdd:category>file-group</fdd:category>
			<fdd:category>encoding</fdd:category>
		</fdd:formatCategories>
		<fdd:gdfrComposition>container-bundle</fdd:gdfrComposition>
		<fdd:gdfrForm>binary</fdd:gdfrForm>
		<fdd:gdfrConstraint>structured</fdd:gdfrConstraint>
		<fdd:gdfrBasis>symbolic</fdd:gdfrBasis>
		<fdd:updates>
			<fdd:date>2019-06-10</fdd:date>
		</fdd:updates>
		<fdd:draftStatus>Preliminary</fdd:draftStatus>
	</fdd:properties>
	<fdd:identificationAndDescription>
		<fdd:fullName>Graphics Language (GL) Transmission Format (glTF) Family</fdd:fullName>
		<fdd:keywords>
			<fdd:keyword>3D model formats</fdd:keyword>
		</fdd:keywords>
		<fdd:description>
			<p>The formats in the GL Transmission Format (glTF) Family have been designed as efficient, extensible, interoperable asset delivery formats for the transmission and loading of 3D content.  Development and maintenance of glTF is through an open project by <a href="https://www.khronos.org/">Khronos</a>, an industry consortium focused on cooperatively creating open standards for royalty-free use, particularly standards to take advantage of hardware acceleration for computation or graphics.  For more detail on Khronos as an organization and the motivation behind glTF, see <a href="#notes">Notes</a> below.  glTF is intended as a vendor-neutral distribution format for 3D content, bridging the gap between 3D content creation tools and applications displaying 3D graphics.  Its originators described it as the &quot;JPEG of 3D&quot; or as a 3D content format for &quot;the last mile.&quot; glTF minimizes both the size of 3D assets and the runtime processing needed by 3D applications.  An early objective was to support applications built using the <a href="https://www.khronos.org/webgl/">WebGL</a> API, another open specification developed by Khronos.  Based on the <fddLink id="fdd000481">HTML5</fddLink> Canvas element, <a href="https://caniuse.com/#feat=webgl">WebGL has been implemented</a> by most browsers as of June 2019.  However, for broader applicability, <fddLink id="fdd000500">glTF 2.0</fddLink> is intended for use in any runtime environment or API.</p>
			<p>Conceptually, a glTF asset contains zero or more scenes, the set of objects to render visually.  Physically, a glTF asset is a collection of related files, comprising a JSON file and supporting external data files, as illustrated in the <a href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/figures/files.png">glTF basics figure</a> from the specification.  In particular, a glTF asset comprises:</p>
			<ul>
				<li>A JSON-formatted file (.gltf) containing a full scene description using a node hierarchy and also descriptions and links for materials, cameras, mesh geometry, animations, and other constructs.</li>
				<li>Binary files (.bin) containing geometry and animation data, and other buffer-based data.</li>
				<li>Image files (.jpg, .png) for textures.  These are the only image formats supported for textures. As for most JPEG images on the web, the .jpg files are expected be in the JPEG File Interchange Format (<fddLink id="fdd000018">JFIF_1_02</fddLink>), a wrapper format for image data in the <fddLink id="fdd000017">JPEG</fddLink> encoding.</li>
			</ul>
			<p>glTF assets can include: scene and model data; geometry; skins; shaders;  texture files; and animation data.  glTF 2.0 can include PBR (<a href="https://en.wikipedia.org/wiki/Physically_based_rendering">Physically Based Rendering</a>) descriptions for metallic materials.</p>
			<p>As of 2019, there are two chronological versions of glTF and a binary variant:</p>
			<ul>
				<li>
					<b>glTF 1.0</b>: Released in October 2015 following a period of development starting in 2012.  See <a href="https://www.khronos.org/assets/uploads/developers/library/overview/gltf-overview.pdf">glTF Briefing</a> from September 2016.  This release was received enthusiastically, but some potential adopters asked Khronos to adapt glTf to be less tied to WebGL.   For example, in glTF 1.0, a material was defined with a GLSL shader, which suited WebGL, but was problematic when importing a glTF model into an application based on <a href="https://docs.microsoft.com/en-us/windows/desktop/direct3d">Direct3D</a>, a graphics API for Microsoft Windows, or <a href="https://developer.apple.com/metal/">Metal</a> from Apple. Judging from <a href="https://github.com/KhronosGroup/glTF#gltf-tools">glTF Tools</a> from Khronos, most tools now support glTF 2.0.  glTF 1.0 is not described separately on this website.</li>
				<li>
					<b>glTF 2.0</b>: Released in June 2017.  A significant upgrade to glTF 1.0, designed to support practical runtime implementations for many graphics APIs.  Support for <a href="https://en.wikipedia.org/wiki/Physically_based_rendering">Physically Based Rendering (PBR)</a> was added for portable, consistent description of materials.  See the <a href="https://www.khronos.org/news/press/khronos-releases-gltf-2.0-specification">Khronos press release for glTF 2.0</a>.</li>
				<li>
					<b>Binary glTF</b>: A binary option for storing the content for a glTF asset was introduced as an extension to glTF 1.0 and incorporated into the glTF 2.0 specification.  See <a href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification">GLB File Format Specification</a> section in the specification for glTF 2.0.  It consists of a 12-byte header, a JSON chunk, and an optional binary chunk.  The binary chunk may contain all, or only some, of the image and other binary files that comprise the glTF asset.  This format is not described separately on this website.</li>
			</ul>
			<p>glTF defines an extensibility mechanism. See <a href="https://github.com/KhronosGroup/glTF/blob/master/extensions/README.md#about-gltf-extensions">About glTF Extensions</a>. Extensions can introduce new properties, new parameter semantics, reserved IDs, and new container formats.  Extensions can define new properties that reference external data, and the extension can define the format of such data.  Extensions are written against a specific version of glTF and may be promoted to core glTF in a later glTF version.  Some extensions are ratified as Khronos (KHR) extensions; others can be vendor-specific.  All extensions used in a model must be listed the top-level <i>extensionsUsed</i> array; required extensions are listed in the <i>extensionsRequired</i> array.  KHR extensions are designed to allow safe fallback consumption in tools that do not recognize an extension in the <i>extensionsUsed</i> array.</p>
		</fdd:description>
		<fdd:shortDescription>royalty-free family of specifications designed as efficient, extensible, interoperable asset delivery formats for the transmission and loading of 3D content.  Developed as an open project by the Khronos Group.</fdd:shortDescription>
		<fdd:productionPhase>A final-state format used for delivery to a web browser or other viewing software or device.</fdd:productionPhase>
		<fdd:relationships>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:comment>glTF 1.0, not described separately on this website at this time </fdd:comment>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000500</fdd:id>
					<fdd:shortName>glTF_2_0</fdd:shortName>
					<fdd:titleName>glTF 2.0</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Contains</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000381</fdd:id>
					<fdd:shortName>JSON</fdd:shortName>
					<fdd:titleName>JavaScript Object Notation</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>May contain</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000153</fdd:id>
					<fdd:shortName>PNG</fdd:shortName>
					<fdd:titleName>Portable Network Graphics</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>May contain</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000018</fdd:id>
					<fdd:shortName>JFIF</fdd:shortName>
					<fdd:titleName>JPEG File Interchange Format</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Equivalent to</fdd:typeOfRelationship>
				<fdd:comment>Binary glTF, with extension .glb, not described separately on this website.</fdd:comment>
			</fdd:relationship>
		</fdd:relationships>
	</fdd:identificationAndDescription>
	<fdd:localUse>
		<fdd:experience>No direct experience.</fdd:experience>
		<fdd:preference>The Library of Congress has not yet expressed any format preference for digital models used as designs or surrogates for 3-dimensional objects.</fdd:preference>
	</fdd:localUse>
	<fdd:sustainabilityFactors>
		<fdd:disclosure>
			<p>An openly documented, royalty-free specification.  Developed and maintained by <a href="https://www.khronos.org/">Khronos</a>, an industry consortium focused on cooperatively creating open, royalty-free, API specifications that exploit hardware acceleration for graphics, computation, and vision processing.</p>
		</fdd:disclosure>
		<fdd:documentation>Links to specifications and other resources for formats in the glTF family are available from <a href="https://www.khronos.org/gltf/">glTF Overview</a>.</fdd:documentation>
		<fdd:adoption>
			<p>glTF has been rapidly adopted by a large number of applications related to 3D content.  As made clear on a <a href="https://github.com/KhronosGroup/glTF#gltf-tools">list of tools supporting glTF</a> compiled by Khronos, most support is for glTF 2.0.  glTF 1.0 appears to be obsolete and tools developed to import or render glTF 2.0 may well not load or properly render files conforming to glTF 1.0.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
			<p>See <fddLink id="fdd000500">glTF_2_0</fddLink> for information relating to the adoption of glTF 2.0</p>
		</fdd:adoption>
		<fdd:licensingAndPatents>
			<p>Khronos describes glTF as a royalty-free specification.  Software developers are free to use Khronos standards to program software tools, applications, and middleware with no restrictions.  Under limited circumstances, Khronos allows reproduction of the unmodified specifications without fee or royalty.</p>
			<p>See <a href="https://github.com/KhronosGroup/glTF/blob/master/specification/1.0/README.md#appendix-b">Appendix B: Full Khronos Trademark Statement</a> in the specification of glTF 1.0 and <a href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-d-full-khronos-copyright-statement">Appendix D: Full Khronos Copyright Statement</a> in the specification for glTF v 2.0. for statements relating to patents. The Khronos Intellectual Property Rights Policy is Attachment A of the Khronos Group Membership Agreement available at <a href="https://www.khronos.org/files/member_agreement.pdf">www.khronos.org/files/member_agreement.pdf</a>. </p>
			<p>According to <a href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-d-full-khronos-copyright-statement">Appendix D: Full Khronos Copyright Statement</a> in the specification for glTF 2.0, &quot;Parties desiring to implement the specification and make use of Khronos trademarks in relation to that implementation, and receive reciprocal patent license protection under the Khronos IP Policy must become Adopters and confirm the implementation as conformant under the process defined by Khronos for this specification; see <a href="https://www.khronos.org/adopters">https://www.khronos.org/adopters</a>.&quot;</p>
		</fdd:licensingAndPatents>
		<fdd:transparency>
			<p>The JSON-formatted file that acts as a manifest and describes the structural hierarchy of a glTF asset is a plain text resource and easily read with a text editor.  However, a special-purpose editor that understands the structure of a glTF asset and can render the hierachy as a navigable tree is much more convenient for a human reader.  Most of the 3D content is in binary form; often in the form of arrays of numbers.  With full understanding of the form of each array type, the data is intentionally straightforward to parse by computer program; but needs appropriate tools to interpret.</p>
			<p>For information about transparency of images that can be used in glTF assets, see <fddLink id="fdd000018">JPEG/JFIF</fddLink> and <fddLink id="fdd000153">PNG.</fddLink>
			</p>
			<p>Application of compression for data chunks in a glTF asset, e.g., using the optional <a href="https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md">Draco mesh compression</a> (supported as a Khronos-ratified extension to glTF 2.0) to compress mesh geometry data, yields a file that requires more sophisticated tools to render the 3D visualization.</p>
		</fdd:transparency>
		<fdd:selfDocumentation>Very minimal descriptive metadata for the glTF asset as a whole is suggested in the glTF specifications.  See <a href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#reference-asset">asset property reference section in specification for glTF 2.0</a>.  The only mandatory property is the <i>version</i> of glTF used.  A <i>copyright</i> property, for a copyright statement and a <i>generator</i> property to identify the tool used to generate the glTF file are optional properties in the JSON schema. Additional properties are allowed.</fdd:selfDocumentation>
		<fdd:externalDependencies>glTF provides a mechanism that allows the addition of both general-purpose and vendor-specific extensions.  See <a href="https://github.com/KhronosGroup/glTF/blob/master/extensions/README.md">glTF registry</a>.  Some of the extensions are widely used, for example, extension to support the <a href="https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md">Draco</a> &quot;mesh-aware&quot; compression scheme that provides very efficient compression of geometry data.</fdd:externalDependencies>
		<fdd:techProtection>Neither glTF 1.0 nor glTF 2.0 supports encryption within the format files.</fdd:techProtection>
	</fdd:sustainabilityFactors>
	<fdd:qualityAndFunctionalityFactors>
		<fdd:otherQF>
			<fdd:factor>
				<fdd:tag>3D Model Geometry</fdd:tag>
				<fdd:note>By default, glTF supports geometry definition using triangular meshes.  Also supported are modes based on points and lines.  See <a href="https://github.com/KhronosGroup/glTF/tree/master/specification/2.0/#primitivemode">primitive.mode</a> for possible modes for geometry primitives.  The geometry associated with a <i>node</i> in a glTF scene hierarchy can consist of either (a) <i>meshes</i>, or (b) a set of properties that define the node&apos;s position in a structure that represents a <i>skeleton</i> with <i>joints</i>, and a <i>skin</i> that covers the skeletal structure.  The second option comes into play for animation.</fdd:note>
			</fdd:factor>
			<fdd:factor>
				<fdd:tag>3D Model Appearance</fdd:tag>
				<fdd:note>
					<p>glTF supports vertex skinning, which allows the geometry (vertices) of a mesh to be deformed based on the pose of a skeleton. This is essential in order to give animated geometry, for example of virtual characters, a realistic appearance. A texture is defined using an image in PNG or JPEG/JFIF format, with optional specification of filtering or sampling to be applied. The primary structure for defining materials varies between glTF 1.0, which only supports glSL to define shaders, and <fddLink id="fdd000500">glTF 2.0</fddLink> which introduced support for PBR for specifing materials.</p>
				</fdd:note>
			</fdd:factor>
			<fdd:factor>
				<fdd:tag>3D Model Scene</fdd:tag>
				<fdd:note>
					<p>A glTF asset can define an entire scene with many objects placed in the scene.</p>
					<p>The glTF spec is designed to allow applications to choose different lighting implementations based on their requirements. A <i>camera</i> property for a node can position a viewing device in the scene.  This feature of glTF possibly corresponds to a &quot;view&quot; in some other 3D formats.  <a href="../contact_format.shtml">Comments welcome</a>.</p>
				</fdd:note>
			</fdd:factor>
			<fdd:factor>
				<fdd:tag>3D Model Animation</fdd:tag>
				<fdd:note>
					<p>glTF supports animation using skeleton structures (assemblies of bones and joints).  Note: These structures do not have to represent actual bones and skeletons.  See <a href="https://en.wikipedia.org/wiki/Skeletal_animation">Wikipedia entry on skeletal animation</a>.  glTF also supports skinned meshes, allowing the geometry (vertices) of a mesh to be deformed based on the pose of a skeleton. This can be used to give animated characters in games a realistic appearance when they walk, run.shoot, etc.  Such skinned meshes and associated animation sequences can be created using several modeling programs (such as Blender).  See <a href="https://www.gamedev.net/articles/programming/graphics/skinned-mesh-animation-using-matrices-r3577/">Skinned Mesh Animation Using Matrices</a> by Bruce J. Veazie.</p>
					<p>glTF also supports animation using keyframes and matrices that specify changes through translation, rotation, and scale. glTF 2.0 introduced support for animation via instantiated <i>Morph Targets</i>.  See <a href="https://en.wikipedia.org/wiki/Morph_target_animation">Morph target animation</a>.</p>
				</fdd:note>
			</fdd:factor>
		</fdd:otherQF>
	</fdd:qualityAndFunctionalityFactors>
	<fdd:fileTypeSignifiers>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>gltf</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For the JSON-formatted file with the full scene description.   See specification and <a href="https://www.iana.org/assignments/media-types/model/gltf+json">IANA registration</a>.</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>model/gltf+json</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For the JSON-formatted file with the full scene description.  See specification and <a href="https://www.iana.org/assignments/media-types/model/gltf+json">IANA registration</a>.</fdd:note>
			</fdd:internetMediaType>
			<fdd:other>
				<fdd:tag>Pronom PUID</fdd:tag>
				<fdd:values>
					<fdd:sigValueNA>Not found.</fdd:sigValueNA>
					<fdd:note>As of June 2019, there is no PRONOM entry for glTF.</fdd:note>
				</fdd:values>
			</fdd:other>
			<fdd:other>
				<fdd:tag>Wikidata Title ID</fdd:tag>
				<fdd:values>
					<fdd:sigValues>
						<fdd:sigValue>Q28135989</fdd:sigValue>
					</fdd:sigValues>
					<fdd:note>See <a href="https://www.wikidata.org/wiki/Q28135989">https://www.wikidata.org/wiki/Q28135989</a>.</fdd:note>
				</fdd:values>
			</fdd:other>
		</fdd:signifiersGroup>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>glb</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For Binary glTF.  See specification and <a href="https://www.iana.org/assignments/media-types/model/gltf-binary">IANA registration</a>.</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>model/gltf-binary</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For Binary glTF.  See specification and <a href="https://www.iana.org/assignments/media-types/model/gltf-binary">IANA registration</a>.</fdd:note>
			</fdd:internetMediaType>
			<fdd:magicNumbers>
				<fdd:sigValues>
					<fdd:sigValue>ASCII: glTF</fdd:sigValue>
					<fdd:sigValue>HEX: 0x46546C67</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For Binary glTF.  See specification and <a href="https://www.iana.org/assignments/media-types/model/gltf-binary">IANA registration</a>.</fdd:note>
			</fdd:magicNumbers>
		</fdd:signifiersGroup>
	</fdd:fileTypeSignifiers>
	<fdd:notes>
		<fdd:general>
			<p>
				<b>About the Khronos Group</b>:  <a href="https://www.khronos.org/">Khronos</a> is an industry consortium focused on cooperatively creating open standards for 3D graphics, virtual and augmented reality, parallel computing, neural networks, and vision processing that are available for royalty-free use.  Khronos was formed in 2000 and has around 120 member companies. In addition to glTF, Khronos governs specifications such as OpenGL, OpenGL ES, WebGL, and COLLADA.  For more on membership, see <a href="https://www.khronos.org/members/list">Khronos Members</a> and <a href="https://www.khronos.org/members/member_list">Member List</a>.</p>
			<p>
				<b>Motivation for creating glTF</b>. The specification provides the following motivation for creating a new format for 3D models:</p>
			<p>&quot;Traditional 3D modeling formats have been designed to store data for offline use, primarily to support authoring workflows on desktop systems.  Industry-standard 3D interchange formats allow for sharing assets between different modeling tools, and within the content pipeline in general. However, neither of these types of formats is optimized for download speed or fast loading at runtime. Files tend to grow very large, and applications need to do a significant amount of processing to load such assets into GPU-accelerated applications.  With the advent of mobile- and web-based 3D computing, new classes of applications have emerged that require fast, dynamic loading of standardized 3D assets.  glTF solves these problems by providing a vendor- and runtime-neutral format that can be loaded and rendered with minimal processing. The format combines an easily parseable JSON scene description with one or more binary files representing geometry, animations, and other rich data. Binary data is stored in such a way that it can be loaded directly into GPU buffers without additional parsing or other manipulation. Using this approach, glTF is able to faithfully preserve full hierarchical scenes with nodes, meshes, cameras, materials, and animations, while enabling efficient delivery and fast loading.&quot;</p>
			<p>
				<b>3D Model Characteristics</b>:  The quality and functionality factors used above are based on an analysis from 2008 in <a href="https://www.archives.gov/files/applied-research/ncsa/8-an-overview-of-3d-data-content-file-formats-and-viewers.pdf">An Overview of 3D Data Content, File Formats and Viewers</a>, a technical report (ISDA08-002) from the National Center for Supercomputing Applications (NCSA).  According to this analysis, the key aspects of a 3D model are: geometry, appearance, scene, and animation. For brief descriptions of these factors, see the table for 3D model formats under <a href="./fdd_explanation.shtml#factors">Quality and functionality factors</a>.  The descriptions there are drawn from the 2008 report and from <a href="https://all3dp.com/3d-file-format-3d-files-3d-printer-3d-cad-vrml-stl-obj/">8 Most Common 3D File Formats of 2018</a> (an article from C|net), which uses the same factors to distinguish formats.</p>
			<p>All 3D formats support some method for representing the geometry (the shape) of an object; support for other aspects is optional depending on the primary use of the format.  Table 3 in the 2008 report, <a href="https://www.archives.gov/files/applied-research/ncsa/8-an-overview-of-3d-data-content-file-formats-and-viewers.pdf">An Overview of 3D Data Content, File Formats and Viewers</a>, compares nine popular 3D formats in use in 2008 based on these four aspects of 3D models.  See also <a href="https://all3dp.com/3d-file-format-3d-files-3d-printer-3d-cad-vrml-stl-obj/">8 Most Common 3D File Formats of 2018</a> for discussion of an overlapping set of formats.</p>
		</fdd:general>
		<fdd:history>The development of glTF began in 2012, and led to the release of the glTF 1.0 specification in October 2015.  Version 2.0 of glTF was officially released in June 2017, after a period of beta testing.</fdd:history>
	</fdd:notes>
	<fdd:formatSpecifications>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.khronos.org/gltf/</link>
					<tag>glTF Overview</tag>
					<comment>Links to specifications for glTF 1.0 and glTF 2.0.</comment>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://github.com/KhronosGroup/glTF/blob/master/specification/1.0/README.md</link>
					<tag>Specification for glTF 1.0 | on github</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md</link>
					<tag>Specification for glTF 2.0 | on github</tag>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:formatSpecifications>
	<fdd:usefulReferences>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/GlTF</link>
					<tag>Wikipedia entry for glTF</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://en.wikipedia.org/wiki/Khronos_Group</link>
					<tag>Wikipedia entry for Khronos Group</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Selected resources from the Khronos website</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.khronos.org/gltf/</link>
							<tag>Khronos | glTF Overview </tag>
							<comment>Describes glTF as the &quot;JPEG of 3D.&quot;</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.khronos.org/news/press/khronos-finalizes-gltf-1.0-specification</link>
							<tag>Khronos Finalizes glTF 1.0 Specification | Khronos press release, October 19th 2015 </tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.khronos.org/assets/uploads/developers/library/overview/gltf-overview.pdf</link>
							<tag>glTF Briefing | presentation (September 2016)</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.khronos.org/news/press/khronos-releases-gltf-2.0-specification</link>
							<tag>Khronos Releases glTF 2.0 Specification | Khronos press release, June 5, 2017 </tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://github.com/KhronosGroup/glTF/blob/master/extensions/README.md</link>
							<tag>glTF Extension Registry</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://www.khronos.org/assets/uploads/developers/library/2019-open-ar-cloud/Khronos-Update-Open-AR-Cloud-Symposium_May19.pdf</link>
							<tag>Khronos Update:
Open standards in Augmented Reality (May 2019)</tag>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Resources about characteristics of 3D models and comparisons between formats for 3D content.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://www.archives.gov/files/applied-research/ncsa/8-an-overview-of-3d-data-content-file-formats-and-viewers.pdf</link>
							<tag>An Overview of 3D Data Content, File Formats and Viewers | 2008 report from the National Center for Supercomputing Applications (NCSA)</tag>
							<comment>Uses four elements of a 3D model to compare a selection of popular formats: geometry, appearance, scene, and animation</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://all3dp.com/3d-file-format-3d-files-3d-printer-3d-cad-vrml-stl-obj/</link>
							<tag>8 Most Common 3D File Formats of 2019: All you need to know about 3D file formats</tag>
							<comment>Also describes the four key elements of a 3D model as geometry, appearance, scene, and animation.  Discusses the selected formats in terms of support for these elements.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlGroup>
					<fdd:intro>Selected Wikipedia entries for techniques associated with 3D modeling and computer graphics.</fdd:intro>
					<fdd:urlList>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/Skeletal_animation</link>
							<tag>Wikipedia entry for Skeletal Animation</tag>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/Morph_target_animation</link>
							<tag>Wikipedia entry for Morph Target animation</tag>
							<comment>Supported in glTF 2.0.</comment>
						</fdd:urlReference>
						<fdd:urlReference>
							<link>https://en.wikipedia.org/wiki/Physically_based_rendering</link>
							<tag>Wikipedia entry for Physically based rendering (PBR), a computer graphic technique for visual representation of materials</tag>
							<comment>glTF 2.0 introduced the use of PBR for metallic materials.</comment>
						</fdd:urlReference>
					</fdd:urlList>
				</fdd:urlGroup>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.gamedev.net/articles/programming/graphics/skinned-mesh-animation-using-matrices-r3577/</link>
					<tag>Skinned Mesh Animation Using Matrices (2014) | by Bruce J. Veazie</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>https://www.wikidata.org/wiki/Q28135989</link>
					<tag>Wikidata entry for Q28135989</tag>
					<comment> Information in WikiData about glTF. WikiData Title ID: Q28135989</comment>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:usefulReferences>
</fdd:FDD>
